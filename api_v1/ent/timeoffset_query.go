// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/camera"
	"github.com/shutterbase/shutterbase/ent/predicate"
	"github.com/shutterbase/shutterbase/ent/timeoffset"
	"github.com/shutterbase/shutterbase/ent/user"
)

// TimeOffsetQuery is the builder for querying TimeOffset entities.
type TimeOffsetQuery struct {
	config
	ctx           *QueryContext
	order         []timeoffset.OrderOption
	inters        []Interceptor
	predicates    []predicate.TimeOffset
	withCamera    *CameraQuery
	withCreatedBy *UserQuery
	withUpdatedBy *UserQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TimeOffsetQuery builder.
func (toq *TimeOffsetQuery) Where(ps ...predicate.TimeOffset) *TimeOffsetQuery {
	toq.predicates = append(toq.predicates, ps...)
	return toq
}

// Limit the number of records to be returned by this query.
func (toq *TimeOffsetQuery) Limit(limit int) *TimeOffsetQuery {
	toq.ctx.Limit = &limit
	return toq
}

// Offset to start from.
func (toq *TimeOffsetQuery) Offset(offset int) *TimeOffsetQuery {
	toq.ctx.Offset = &offset
	return toq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (toq *TimeOffsetQuery) Unique(unique bool) *TimeOffsetQuery {
	toq.ctx.Unique = &unique
	return toq
}

// Order specifies how the records should be ordered.
func (toq *TimeOffsetQuery) Order(o ...timeoffset.OrderOption) *TimeOffsetQuery {
	toq.order = append(toq.order, o...)
	return toq
}

// QueryCamera chains the current query on the "camera" edge.
func (toq *TimeOffsetQuery) QueryCamera() *CameraQuery {
	query := (&CameraClient{config: toq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := toq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := toq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(timeoffset.Table, timeoffset.FieldID, selector),
			sqlgraph.To(camera.Table, camera.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, timeoffset.CameraTable, timeoffset.CameraColumn),
		)
		fromU = sqlgraph.SetNeighbors(toq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedBy chains the current query on the "created_by" edge.
func (toq *TimeOffsetQuery) QueryCreatedBy() *UserQuery {
	query := (&UserClient{config: toq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := toq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := toq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(timeoffset.Table, timeoffset.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, timeoffset.CreatedByTable, timeoffset.CreatedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(toq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdatedBy chains the current query on the "updated_by" edge.
func (toq *TimeOffsetQuery) QueryUpdatedBy() *UserQuery {
	query := (&UserClient{config: toq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := toq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := toq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(timeoffset.Table, timeoffset.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, timeoffset.UpdatedByTable, timeoffset.UpdatedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(toq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TimeOffset entity from the query.
// Returns a *NotFoundError when no TimeOffset was found.
func (toq *TimeOffsetQuery) First(ctx context.Context) (*TimeOffset, error) {
	nodes, err := toq.Limit(1).All(setContextOp(ctx, toq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{timeoffset.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (toq *TimeOffsetQuery) FirstX(ctx context.Context) *TimeOffset {
	node, err := toq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TimeOffset ID from the query.
// Returns a *NotFoundError when no TimeOffset ID was found.
func (toq *TimeOffsetQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = toq.Limit(1).IDs(setContextOp(ctx, toq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{timeoffset.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (toq *TimeOffsetQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := toq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TimeOffset entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TimeOffset entity is found.
// Returns a *NotFoundError when no TimeOffset entities are found.
func (toq *TimeOffsetQuery) Only(ctx context.Context) (*TimeOffset, error) {
	nodes, err := toq.Limit(2).All(setContextOp(ctx, toq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{timeoffset.Label}
	default:
		return nil, &NotSingularError{timeoffset.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (toq *TimeOffsetQuery) OnlyX(ctx context.Context) *TimeOffset {
	node, err := toq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TimeOffset ID in the query.
// Returns a *NotSingularError when more than one TimeOffset ID is found.
// Returns a *NotFoundError when no entities are found.
func (toq *TimeOffsetQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = toq.Limit(2).IDs(setContextOp(ctx, toq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{timeoffset.Label}
	default:
		err = &NotSingularError{timeoffset.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (toq *TimeOffsetQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := toq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TimeOffsets.
func (toq *TimeOffsetQuery) All(ctx context.Context) ([]*TimeOffset, error) {
	ctx = setContextOp(ctx, toq.ctx, "All")
	if err := toq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TimeOffset, *TimeOffsetQuery]()
	return withInterceptors[[]*TimeOffset](ctx, toq, qr, toq.inters)
}

// AllX is like All, but panics if an error occurs.
func (toq *TimeOffsetQuery) AllX(ctx context.Context) []*TimeOffset {
	nodes, err := toq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TimeOffset IDs.
func (toq *TimeOffsetQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if toq.ctx.Unique == nil && toq.path != nil {
		toq.Unique(true)
	}
	ctx = setContextOp(ctx, toq.ctx, "IDs")
	if err = toq.Select(timeoffset.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (toq *TimeOffsetQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := toq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (toq *TimeOffsetQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, toq.ctx, "Count")
	if err := toq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, toq, querierCount[*TimeOffsetQuery](), toq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (toq *TimeOffsetQuery) CountX(ctx context.Context) int {
	count, err := toq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (toq *TimeOffsetQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, toq.ctx, "Exist")
	switch _, err := toq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (toq *TimeOffsetQuery) ExistX(ctx context.Context) bool {
	exist, err := toq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TimeOffsetQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (toq *TimeOffsetQuery) Clone() *TimeOffsetQuery {
	if toq == nil {
		return nil
	}
	return &TimeOffsetQuery{
		config:        toq.config,
		ctx:           toq.ctx.Clone(),
		order:         append([]timeoffset.OrderOption{}, toq.order...),
		inters:        append([]Interceptor{}, toq.inters...),
		predicates:    append([]predicate.TimeOffset{}, toq.predicates...),
		withCamera:    toq.withCamera.Clone(),
		withCreatedBy: toq.withCreatedBy.Clone(),
		withUpdatedBy: toq.withUpdatedBy.Clone(),
		// clone intermediate query.
		sql:  toq.sql.Clone(),
		path: toq.path,
	}
}

// WithCamera tells the query-builder to eager-load the nodes that are connected to
// the "camera" edge. The optional arguments are used to configure the query builder of the edge.
func (toq *TimeOffsetQuery) WithCamera(opts ...func(*CameraQuery)) *TimeOffsetQuery {
	query := (&CameraClient{config: toq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	toq.withCamera = query
	return toq
}

// WithCreatedBy tells the query-builder to eager-load the nodes that are connected to
// the "created_by" edge. The optional arguments are used to configure the query builder of the edge.
func (toq *TimeOffsetQuery) WithCreatedBy(opts ...func(*UserQuery)) *TimeOffsetQuery {
	query := (&UserClient{config: toq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	toq.withCreatedBy = query
	return toq
}

// WithUpdatedBy tells the query-builder to eager-load the nodes that are connected to
// the "updated_by" edge. The optional arguments are used to configure the query builder of the edge.
func (toq *TimeOffsetQuery) WithUpdatedBy(opts ...func(*UserQuery)) *TimeOffsetQuery {
	query := (&UserClient{config: toq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	toq.withUpdatedBy = query
	return toq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TimeOffset.Query().
//		GroupBy(timeoffset.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (toq *TimeOffsetQuery) GroupBy(field string, fields ...string) *TimeOffsetGroupBy {
	toq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TimeOffsetGroupBy{build: toq}
	grbuild.flds = &toq.ctx.Fields
	grbuild.label = timeoffset.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.TimeOffset.Query().
//		Select(timeoffset.FieldCreatedAt).
//		Scan(ctx, &v)
func (toq *TimeOffsetQuery) Select(fields ...string) *TimeOffsetSelect {
	toq.ctx.Fields = append(toq.ctx.Fields, fields...)
	sbuild := &TimeOffsetSelect{TimeOffsetQuery: toq}
	sbuild.label = timeoffset.Label
	sbuild.flds, sbuild.scan = &toq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TimeOffsetSelect configured with the given aggregations.
func (toq *TimeOffsetQuery) Aggregate(fns ...AggregateFunc) *TimeOffsetSelect {
	return toq.Select().Aggregate(fns...)
}

func (toq *TimeOffsetQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range toq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, toq); err != nil {
				return err
			}
		}
	}
	for _, f := range toq.ctx.Fields {
		if !timeoffset.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if toq.path != nil {
		prev, err := toq.path(ctx)
		if err != nil {
			return err
		}
		toq.sql = prev
	}
	return nil
}

func (toq *TimeOffsetQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TimeOffset, error) {
	var (
		nodes       = []*TimeOffset{}
		withFKs     = toq.withFKs
		_spec       = toq.querySpec()
		loadedTypes = [3]bool{
			toq.withCamera != nil,
			toq.withCreatedBy != nil,
			toq.withUpdatedBy != nil,
		}
	)
	if toq.withCamera != nil || toq.withCreatedBy != nil || toq.withUpdatedBy != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, timeoffset.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TimeOffset).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TimeOffset{config: toq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, toq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := toq.withCamera; query != nil {
		if err := toq.loadCamera(ctx, query, nodes, nil,
			func(n *TimeOffset, e *Camera) { n.Edges.Camera = e }); err != nil {
			return nil, err
		}
	}
	if query := toq.withCreatedBy; query != nil {
		if err := toq.loadCreatedBy(ctx, query, nodes, nil,
			func(n *TimeOffset, e *User) { n.Edges.CreatedBy = e }); err != nil {
			return nil, err
		}
	}
	if query := toq.withUpdatedBy; query != nil {
		if err := toq.loadUpdatedBy(ctx, query, nodes, nil,
			func(n *TimeOffset, e *User) { n.Edges.UpdatedBy = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (toq *TimeOffsetQuery) loadCamera(ctx context.Context, query *CameraQuery, nodes []*TimeOffset, init func(*TimeOffset), assign func(*TimeOffset, *Camera)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TimeOffset)
	for i := range nodes {
		if nodes[i].time_offset_camera == nil {
			continue
		}
		fk := *nodes[i].time_offset_camera
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(camera.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "time_offset_camera" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (toq *TimeOffsetQuery) loadCreatedBy(ctx context.Context, query *UserQuery, nodes []*TimeOffset, init func(*TimeOffset), assign func(*TimeOffset, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TimeOffset)
	for i := range nodes {
		if nodes[i].time_offset_created_by == nil {
			continue
		}
		fk := *nodes[i].time_offset_created_by
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "time_offset_created_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (toq *TimeOffsetQuery) loadUpdatedBy(ctx context.Context, query *UserQuery, nodes []*TimeOffset, init func(*TimeOffset), assign func(*TimeOffset, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TimeOffset)
	for i := range nodes {
		if nodes[i].time_offset_updated_by == nil {
			continue
		}
		fk := *nodes[i].time_offset_updated_by
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "time_offset_updated_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (toq *TimeOffsetQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := toq.querySpec()
	_spec.Node.Columns = toq.ctx.Fields
	if len(toq.ctx.Fields) > 0 {
		_spec.Unique = toq.ctx.Unique != nil && *toq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, toq.driver, _spec)
}

func (toq *TimeOffsetQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(timeoffset.Table, timeoffset.Columns, sqlgraph.NewFieldSpec(timeoffset.FieldID, field.TypeUUID))
	_spec.From = toq.sql
	if unique := toq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if toq.path != nil {
		_spec.Unique = true
	}
	if fields := toq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, timeoffset.FieldID)
		for i := range fields {
			if fields[i] != timeoffset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := toq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := toq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := toq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := toq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (toq *TimeOffsetQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(toq.driver.Dialect())
	t1 := builder.Table(timeoffset.Table)
	columns := toq.ctx.Fields
	if len(columns) == 0 {
		columns = timeoffset.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if toq.sql != nil {
		selector = toq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if toq.ctx.Unique != nil && *toq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range toq.predicates {
		p(selector)
	}
	for _, p := range toq.order {
		p(selector)
	}
	if offset := toq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := toq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TimeOffsetGroupBy is the group-by builder for TimeOffset entities.
type TimeOffsetGroupBy struct {
	selector
	build *TimeOffsetQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (togb *TimeOffsetGroupBy) Aggregate(fns ...AggregateFunc) *TimeOffsetGroupBy {
	togb.fns = append(togb.fns, fns...)
	return togb
}

// Scan applies the selector query and scans the result into the given value.
func (togb *TimeOffsetGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, togb.build.ctx, "GroupBy")
	if err := togb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TimeOffsetQuery, *TimeOffsetGroupBy](ctx, togb.build, togb, togb.build.inters, v)
}

func (togb *TimeOffsetGroupBy) sqlScan(ctx context.Context, root *TimeOffsetQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(togb.fns))
	for _, fn := range togb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*togb.flds)+len(togb.fns))
		for _, f := range *togb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*togb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := togb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TimeOffsetSelect is the builder for selecting fields of TimeOffset entities.
type TimeOffsetSelect struct {
	*TimeOffsetQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tos *TimeOffsetSelect) Aggregate(fns ...AggregateFunc) *TimeOffsetSelect {
	tos.fns = append(tos.fns, fns...)
	return tos
}

// Scan applies the selector query and scans the result into the given value.
func (tos *TimeOffsetSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tos.ctx, "Select")
	if err := tos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TimeOffsetQuery, *TimeOffsetSelect](ctx, tos.TimeOffsetQuery, tos, tos.inters, v)
}

func (tos *TimeOffsetSelect) sqlScan(ctx context.Context, root *TimeOffsetQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tos.fns))
	for _, fn := range tos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
