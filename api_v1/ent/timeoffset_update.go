// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/camera"
	"github.com/shutterbase/shutterbase/ent/predicate"
	"github.com/shutterbase/shutterbase/ent/timeoffset"
	"github.com/shutterbase/shutterbase/ent/user"
)

// TimeOffsetUpdate is the builder for updating TimeOffset entities.
type TimeOffsetUpdate struct {
	config
	hooks    []Hook
	mutation *TimeOffsetMutation
}

// Where appends a list predicates to the TimeOffsetUpdate builder.
func (tou *TimeOffsetUpdate) Where(ps ...predicate.TimeOffset) *TimeOffsetUpdate {
	tou.mutation.Where(ps...)
	return tou
}

// SetUpdatedAt sets the "updated_at" field.
func (tou *TimeOffsetUpdate) SetUpdatedAt(t time.Time) *TimeOffsetUpdate {
	tou.mutation.SetUpdatedAt(t)
	return tou
}

// SetCameraID sets the "camera" edge to the Camera entity by ID.
func (tou *TimeOffsetUpdate) SetCameraID(id uuid.UUID) *TimeOffsetUpdate {
	tou.mutation.SetCameraID(id)
	return tou
}

// SetNillableCameraID sets the "camera" edge to the Camera entity by ID if the given value is not nil.
func (tou *TimeOffsetUpdate) SetNillableCameraID(id *uuid.UUID) *TimeOffsetUpdate {
	if id != nil {
		tou = tou.SetCameraID(*id)
	}
	return tou
}

// SetCamera sets the "camera" edge to the Camera entity.
func (tou *TimeOffsetUpdate) SetCamera(c *Camera) *TimeOffsetUpdate {
	return tou.SetCameraID(c.ID)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (tou *TimeOffsetUpdate) SetCreatedByID(id uuid.UUID) *TimeOffsetUpdate {
	tou.mutation.SetCreatedByID(id)
	return tou
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (tou *TimeOffsetUpdate) SetNillableCreatedByID(id *uuid.UUID) *TimeOffsetUpdate {
	if id != nil {
		tou = tou.SetCreatedByID(*id)
	}
	return tou
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (tou *TimeOffsetUpdate) SetCreatedBy(u *User) *TimeOffsetUpdate {
	return tou.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (tou *TimeOffsetUpdate) SetUpdatedByID(id uuid.UUID) *TimeOffsetUpdate {
	tou.mutation.SetUpdatedByID(id)
	return tou
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (tou *TimeOffsetUpdate) SetNillableUpdatedByID(id *uuid.UUID) *TimeOffsetUpdate {
	if id != nil {
		tou = tou.SetUpdatedByID(*id)
	}
	return tou
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (tou *TimeOffsetUpdate) SetUpdatedBy(u *User) *TimeOffsetUpdate {
	return tou.SetUpdatedByID(u.ID)
}

// Mutation returns the TimeOffsetMutation object of the builder.
func (tou *TimeOffsetUpdate) Mutation() *TimeOffsetMutation {
	return tou.mutation
}

// ClearCamera clears the "camera" edge to the Camera entity.
func (tou *TimeOffsetUpdate) ClearCamera() *TimeOffsetUpdate {
	tou.mutation.ClearCamera()
	return tou
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (tou *TimeOffsetUpdate) ClearCreatedBy() *TimeOffsetUpdate {
	tou.mutation.ClearCreatedBy()
	return tou
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (tou *TimeOffsetUpdate) ClearUpdatedBy() *TimeOffsetUpdate {
	tou.mutation.ClearUpdatedBy()
	return tou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tou *TimeOffsetUpdate) Save(ctx context.Context) (int, error) {
	tou.defaults()
	return withHooks(ctx, tou.sqlSave, tou.mutation, tou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tou *TimeOffsetUpdate) SaveX(ctx context.Context) int {
	affected, err := tou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tou *TimeOffsetUpdate) Exec(ctx context.Context) error {
	_, err := tou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tou *TimeOffsetUpdate) ExecX(ctx context.Context) {
	if err := tou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tou *TimeOffsetUpdate) defaults() {
	if _, ok := tou.mutation.UpdatedAt(); !ok {
		v := timeoffset.UpdateDefaultUpdatedAt()
		tou.mutation.SetUpdatedAt(v)
	}
}

func (tou *TimeOffsetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(timeoffset.Table, timeoffset.Columns, sqlgraph.NewFieldSpec(timeoffset.FieldID, field.TypeUUID))
	if ps := tou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tou.mutation.UpdatedAt(); ok {
		_spec.SetField(timeoffset.FieldUpdatedAt, field.TypeTime, value)
	}
	if tou.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timeoffset.CameraTable,
			Columns: []string{timeoffset.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timeoffset.CameraTable,
			Columns: []string{timeoffset.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tou.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timeoffset.CreatedByTable,
			Columns: []string{timeoffset.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timeoffset.CreatedByTable,
			Columns: []string{timeoffset.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tou.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timeoffset.UpdatedByTable,
			Columns: []string{timeoffset.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tou.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timeoffset.UpdatedByTable,
			Columns: []string{timeoffset.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timeoffset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tou.mutation.done = true
	return n, nil
}

// TimeOffsetUpdateOne is the builder for updating a single TimeOffset entity.
type TimeOffsetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TimeOffsetMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (touo *TimeOffsetUpdateOne) SetUpdatedAt(t time.Time) *TimeOffsetUpdateOne {
	touo.mutation.SetUpdatedAt(t)
	return touo
}

// SetCameraID sets the "camera" edge to the Camera entity by ID.
func (touo *TimeOffsetUpdateOne) SetCameraID(id uuid.UUID) *TimeOffsetUpdateOne {
	touo.mutation.SetCameraID(id)
	return touo
}

// SetNillableCameraID sets the "camera" edge to the Camera entity by ID if the given value is not nil.
func (touo *TimeOffsetUpdateOne) SetNillableCameraID(id *uuid.UUID) *TimeOffsetUpdateOne {
	if id != nil {
		touo = touo.SetCameraID(*id)
	}
	return touo
}

// SetCamera sets the "camera" edge to the Camera entity.
func (touo *TimeOffsetUpdateOne) SetCamera(c *Camera) *TimeOffsetUpdateOne {
	return touo.SetCameraID(c.ID)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (touo *TimeOffsetUpdateOne) SetCreatedByID(id uuid.UUID) *TimeOffsetUpdateOne {
	touo.mutation.SetCreatedByID(id)
	return touo
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (touo *TimeOffsetUpdateOne) SetNillableCreatedByID(id *uuid.UUID) *TimeOffsetUpdateOne {
	if id != nil {
		touo = touo.SetCreatedByID(*id)
	}
	return touo
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (touo *TimeOffsetUpdateOne) SetCreatedBy(u *User) *TimeOffsetUpdateOne {
	return touo.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (touo *TimeOffsetUpdateOne) SetUpdatedByID(id uuid.UUID) *TimeOffsetUpdateOne {
	touo.mutation.SetUpdatedByID(id)
	return touo
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (touo *TimeOffsetUpdateOne) SetNillableUpdatedByID(id *uuid.UUID) *TimeOffsetUpdateOne {
	if id != nil {
		touo = touo.SetUpdatedByID(*id)
	}
	return touo
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (touo *TimeOffsetUpdateOne) SetUpdatedBy(u *User) *TimeOffsetUpdateOne {
	return touo.SetUpdatedByID(u.ID)
}

// Mutation returns the TimeOffsetMutation object of the builder.
func (touo *TimeOffsetUpdateOne) Mutation() *TimeOffsetMutation {
	return touo.mutation
}

// ClearCamera clears the "camera" edge to the Camera entity.
func (touo *TimeOffsetUpdateOne) ClearCamera() *TimeOffsetUpdateOne {
	touo.mutation.ClearCamera()
	return touo
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (touo *TimeOffsetUpdateOne) ClearCreatedBy() *TimeOffsetUpdateOne {
	touo.mutation.ClearCreatedBy()
	return touo
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (touo *TimeOffsetUpdateOne) ClearUpdatedBy() *TimeOffsetUpdateOne {
	touo.mutation.ClearUpdatedBy()
	return touo
}

// Where appends a list predicates to the TimeOffsetUpdate builder.
func (touo *TimeOffsetUpdateOne) Where(ps ...predicate.TimeOffset) *TimeOffsetUpdateOne {
	touo.mutation.Where(ps...)
	return touo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (touo *TimeOffsetUpdateOne) Select(field string, fields ...string) *TimeOffsetUpdateOne {
	touo.fields = append([]string{field}, fields...)
	return touo
}

// Save executes the query and returns the updated TimeOffset entity.
func (touo *TimeOffsetUpdateOne) Save(ctx context.Context) (*TimeOffset, error) {
	touo.defaults()
	return withHooks(ctx, touo.sqlSave, touo.mutation, touo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (touo *TimeOffsetUpdateOne) SaveX(ctx context.Context) *TimeOffset {
	node, err := touo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (touo *TimeOffsetUpdateOne) Exec(ctx context.Context) error {
	_, err := touo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (touo *TimeOffsetUpdateOne) ExecX(ctx context.Context) {
	if err := touo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (touo *TimeOffsetUpdateOne) defaults() {
	if _, ok := touo.mutation.UpdatedAt(); !ok {
		v := timeoffset.UpdateDefaultUpdatedAt()
		touo.mutation.SetUpdatedAt(v)
	}
}

func (touo *TimeOffsetUpdateOne) sqlSave(ctx context.Context) (_node *TimeOffset, err error) {
	_spec := sqlgraph.NewUpdateSpec(timeoffset.Table, timeoffset.Columns, sqlgraph.NewFieldSpec(timeoffset.FieldID, field.TypeUUID))
	id, ok := touo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TimeOffset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := touo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, timeoffset.FieldID)
		for _, f := range fields {
			if !timeoffset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != timeoffset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := touo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := touo.mutation.UpdatedAt(); ok {
		_spec.SetField(timeoffset.FieldUpdatedAt, field.TypeTime, value)
	}
	if touo.mutation.CameraCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timeoffset.CameraTable,
			Columns: []string{timeoffset.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timeoffset.CameraTable,
			Columns: []string{timeoffset.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if touo.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timeoffset.CreatedByTable,
			Columns: []string{timeoffset.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timeoffset.CreatedByTable,
			Columns: []string{timeoffset.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if touo.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timeoffset.UpdatedByTable,
			Columns: []string{timeoffset.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := touo.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timeoffset.UpdatedByTable,
			Columns: []string{timeoffset.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TimeOffset{config: touo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, touo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timeoffset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	touo.mutation.done = true
	return _node, nil
}
