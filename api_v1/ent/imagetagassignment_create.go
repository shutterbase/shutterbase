// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/image"
	"github.com/shutterbase/shutterbase/ent/imagetag"
	"github.com/shutterbase/shutterbase/ent/imagetagassignment"
	"github.com/shutterbase/shutterbase/ent/user"
)

// ImageTagAssignmentCreate is the builder for creating a ImageTagAssignment entity.
type ImageTagAssignmentCreate struct {
	config
	mutation *ImageTagAssignmentMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (itac *ImageTagAssignmentCreate) SetCreatedAt(t time.Time) *ImageTagAssignmentCreate {
	itac.mutation.SetCreatedAt(t)
	return itac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (itac *ImageTagAssignmentCreate) SetNillableCreatedAt(t *time.Time) *ImageTagAssignmentCreate {
	if t != nil {
		itac.SetCreatedAt(*t)
	}
	return itac
}

// SetUpdatedAt sets the "updated_at" field.
func (itac *ImageTagAssignmentCreate) SetUpdatedAt(t time.Time) *ImageTagAssignmentCreate {
	itac.mutation.SetUpdatedAt(t)
	return itac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (itac *ImageTagAssignmentCreate) SetNillableUpdatedAt(t *time.Time) *ImageTagAssignmentCreate {
	if t != nil {
		itac.SetUpdatedAt(*t)
	}
	return itac
}

// SetType sets the "type" field.
func (itac *ImageTagAssignmentCreate) SetType(i imagetagassignment.Type) *ImageTagAssignmentCreate {
	itac.mutation.SetType(i)
	return itac
}

// SetNillableType sets the "type" field if the given value is not nil.
func (itac *ImageTagAssignmentCreate) SetNillableType(i *imagetagassignment.Type) *ImageTagAssignmentCreate {
	if i != nil {
		itac.SetType(*i)
	}
	return itac
}

// SetID sets the "id" field.
func (itac *ImageTagAssignmentCreate) SetID(u uuid.UUID) *ImageTagAssignmentCreate {
	itac.mutation.SetID(u)
	return itac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (itac *ImageTagAssignmentCreate) SetNillableID(u *uuid.UUID) *ImageTagAssignmentCreate {
	if u != nil {
		itac.SetID(*u)
	}
	return itac
}

// SetImageID sets the "image" edge to the Image entity by ID.
func (itac *ImageTagAssignmentCreate) SetImageID(id uuid.UUID) *ImageTagAssignmentCreate {
	itac.mutation.SetImageID(id)
	return itac
}

// SetImage sets the "image" edge to the Image entity.
func (itac *ImageTagAssignmentCreate) SetImage(i *Image) *ImageTagAssignmentCreate {
	return itac.SetImageID(i.ID)
}

// SetImageTagID sets the "image_tag" edge to the ImageTag entity by ID.
func (itac *ImageTagAssignmentCreate) SetImageTagID(id uuid.UUID) *ImageTagAssignmentCreate {
	itac.mutation.SetImageTagID(id)
	return itac
}

// SetImageTag sets the "image_tag" edge to the ImageTag entity.
func (itac *ImageTagAssignmentCreate) SetImageTag(i *ImageTag) *ImageTagAssignmentCreate {
	return itac.SetImageTagID(i.ID)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (itac *ImageTagAssignmentCreate) SetCreatedByID(id uuid.UUID) *ImageTagAssignmentCreate {
	itac.mutation.SetCreatedByID(id)
	return itac
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (itac *ImageTagAssignmentCreate) SetNillableCreatedByID(id *uuid.UUID) *ImageTagAssignmentCreate {
	if id != nil {
		itac = itac.SetCreatedByID(*id)
	}
	return itac
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (itac *ImageTagAssignmentCreate) SetCreatedBy(u *User) *ImageTagAssignmentCreate {
	return itac.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (itac *ImageTagAssignmentCreate) SetUpdatedByID(id uuid.UUID) *ImageTagAssignmentCreate {
	itac.mutation.SetUpdatedByID(id)
	return itac
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (itac *ImageTagAssignmentCreate) SetNillableUpdatedByID(id *uuid.UUID) *ImageTagAssignmentCreate {
	if id != nil {
		itac = itac.SetUpdatedByID(*id)
	}
	return itac
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (itac *ImageTagAssignmentCreate) SetUpdatedBy(u *User) *ImageTagAssignmentCreate {
	return itac.SetUpdatedByID(u.ID)
}

// Mutation returns the ImageTagAssignmentMutation object of the builder.
func (itac *ImageTagAssignmentCreate) Mutation() *ImageTagAssignmentMutation {
	return itac.mutation
}

// Save creates the ImageTagAssignment in the database.
func (itac *ImageTagAssignmentCreate) Save(ctx context.Context) (*ImageTagAssignment, error) {
	itac.defaults()
	return withHooks(ctx, itac.sqlSave, itac.mutation, itac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (itac *ImageTagAssignmentCreate) SaveX(ctx context.Context) *ImageTagAssignment {
	v, err := itac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itac *ImageTagAssignmentCreate) Exec(ctx context.Context) error {
	_, err := itac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itac *ImageTagAssignmentCreate) ExecX(ctx context.Context) {
	if err := itac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (itac *ImageTagAssignmentCreate) defaults() {
	if _, ok := itac.mutation.CreatedAt(); !ok {
		v := imagetagassignment.DefaultCreatedAt()
		itac.mutation.SetCreatedAt(v)
	}
	if _, ok := itac.mutation.UpdatedAt(); !ok {
		v := imagetagassignment.DefaultUpdatedAt()
		itac.mutation.SetUpdatedAt(v)
	}
	if _, ok := itac.mutation.GetType(); !ok {
		v := imagetagassignment.DefaultType
		itac.mutation.SetType(v)
	}
	if _, ok := itac.mutation.ID(); !ok {
		v := imagetagassignment.DefaultID()
		itac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itac *ImageTagAssignmentCreate) check() error {
	if _, ok := itac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ImageTagAssignment.created_at"`)}
	}
	if _, ok := itac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ImageTagAssignment.updated_at"`)}
	}
	if _, ok := itac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ImageTagAssignment.type"`)}
	}
	if v, ok := itac.mutation.GetType(); ok {
		if err := imagetagassignment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ImageTagAssignment.type": %w`, err)}
		}
	}
	if _, ok := itac.mutation.ImageID(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required edge "ImageTagAssignment.image"`)}
	}
	if _, ok := itac.mutation.ImageTagID(); !ok {
		return &ValidationError{Name: "image_tag", err: errors.New(`ent: missing required edge "ImageTagAssignment.image_tag"`)}
	}
	return nil
}

func (itac *ImageTagAssignmentCreate) sqlSave(ctx context.Context) (*ImageTagAssignment, error) {
	if err := itac.check(); err != nil {
		return nil, err
	}
	_node, _spec := itac.createSpec()
	if err := sqlgraph.CreateNode(ctx, itac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	itac.mutation.id = &_node.ID
	itac.mutation.done = true
	return _node, nil
}

func (itac *ImageTagAssignmentCreate) createSpec() (*ImageTagAssignment, *sqlgraph.CreateSpec) {
	var (
		_node = &ImageTagAssignment{config: itac.config}
		_spec = sqlgraph.NewCreateSpec(imagetagassignment.Table, sqlgraph.NewFieldSpec(imagetagassignment.FieldID, field.TypeUUID))
	)
	if id, ok := itac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := itac.mutation.CreatedAt(); ok {
		_spec.SetField(imagetagassignment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := itac.mutation.UpdatedAt(); ok {
		_spec.SetField(imagetagassignment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := itac.mutation.GetType(); ok {
		_spec.SetField(imagetagassignment.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if nodes := itac.mutation.ImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetagassignment.ImageTable,
			Columns: []string{imagetagassignment.ImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.image_tag_assignment_image = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := itac.mutation.ImageTagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetagassignment.ImageTagTable,
			Columns: []string{imagetagassignment.ImageTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagetag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.image_tag_assignment_image_tag = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := itac.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetagassignment.CreatedByTable,
			Columns: []string{imagetagassignment.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.image_tag_assignment_created_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := itac.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetagassignment.UpdatedByTable,
			Columns: []string{imagetagassignment.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.image_tag_assignment_updated_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImageTagAssignmentCreateBulk is the builder for creating many ImageTagAssignment entities in bulk.
type ImageTagAssignmentCreateBulk struct {
	config
	builders []*ImageTagAssignmentCreate
}

// Save creates the ImageTagAssignment entities in the database.
func (itacb *ImageTagAssignmentCreateBulk) Save(ctx context.Context) ([]*ImageTagAssignment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(itacb.builders))
	nodes := make([]*ImageTagAssignment, len(itacb.builders))
	mutators := make([]Mutator, len(itacb.builders))
	for i := range itacb.builders {
		func(i int, root context.Context) {
			builder := itacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImageTagAssignmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, itacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, itacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, itacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (itacb *ImageTagAssignmentCreateBulk) SaveX(ctx context.Context) []*ImageTagAssignment {
	v, err := itacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itacb *ImageTagAssignmentCreateBulk) Exec(ctx context.Context) error {
	_, err := itacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itacb *ImageTagAssignmentCreateBulk) ExecX(ctx context.Context) {
	if err := itacb.Exec(ctx); err != nil {
		panic(err)
	}
}
