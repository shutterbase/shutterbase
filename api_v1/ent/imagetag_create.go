// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/imagetag"
	"github.com/shutterbase/shutterbase/ent/imagetagassignment"
	"github.com/shutterbase/shutterbase/ent/project"
	"github.com/shutterbase/shutterbase/ent/user"
)

// ImageTagCreate is the builder for creating a ImageTag entity.
type ImageTagCreate struct {
	config
	mutation *ImageTagMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (itc *ImageTagCreate) SetCreatedAt(t time.Time) *ImageTagCreate {
	itc.mutation.SetCreatedAt(t)
	return itc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (itc *ImageTagCreate) SetNillableCreatedAt(t *time.Time) *ImageTagCreate {
	if t != nil {
		itc.SetCreatedAt(*t)
	}
	return itc
}

// SetUpdatedAt sets the "updated_at" field.
func (itc *ImageTagCreate) SetUpdatedAt(t time.Time) *ImageTagCreate {
	itc.mutation.SetUpdatedAt(t)
	return itc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (itc *ImageTagCreate) SetNillableUpdatedAt(t *time.Time) *ImageTagCreate {
	if t != nil {
		itc.SetUpdatedAt(*t)
	}
	return itc
}

// SetName sets the "name" field.
func (itc *ImageTagCreate) SetName(s string) *ImageTagCreate {
	itc.mutation.SetName(s)
	return itc
}

// SetDescription sets the "description" field.
func (itc *ImageTagCreate) SetDescription(s string) *ImageTagCreate {
	itc.mutation.SetDescription(s)
	return itc
}

// SetIsAlbum sets the "is_album" field.
func (itc *ImageTagCreate) SetIsAlbum(b bool) *ImageTagCreate {
	itc.mutation.SetIsAlbum(b)
	return itc
}

// SetNillableIsAlbum sets the "is_album" field if the given value is not nil.
func (itc *ImageTagCreate) SetNillableIsAlbum(b *bool) *ImageTagCreate {
	if b != nil {
		itc.SetIsAlbum(*b)
	}
	return itc
}

// SetType sets the "type" field.
func (itc *ImageTagCreate) SetType(i imagetag.Type) *ImageTagCreate {
	itc.mutation.SetType(i)
	return itc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (itc *ImageTagCreate) SetNillableType(i *imagetag.Type) *ImageTagCreate {
	if i != nil {
		itc.SetType(*i)
	}
	return itc
}

// SetID sets the "id" field.
func (itc *ImageTagCreate) SetID(u uuid.UUID) *ImageTagCreate {
	itc.mutation.SetID(u)
	return itc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (itc *ImageTagCreate) SetNillableID(u *uuid.UUID) *ImageTagCreate {
	if u != nil {
		itc.SetID(*u)
	}
	return itc
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (itc *ImageTagCreate) SetProjectID(id uuid.UUID) *ImageTagCreate {
	itc.mutation.SetProjectID(id)
	return itc
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (itc *ImageTagCreate) SetNillableProjectID(id *uuid.UUID) *ImageTagCreate {
	if id != nil {
		itc = itc.SetProjectID(*id)
	}
	return itc
}

// SetProject sets the "project" edge to the Project entity.
func (itc *ImageTagCreate) SetProject(p *Project) *ImageTagCreate {
	return itc.SetProjectID(p.ID)
}

// AddImageTagAssignmentIDs adds the "image_tag_assignments" edge to the ImageTagAssignment entity by IDs.
func (itc *ImageTagCreate) AddImageTagAssignmentIDs(ids ...uuid.UUID) *ImageTagCreate {
	itc.mutation.AddImageTagAssignmentIDs(ids...)
	return itc
}

// AddImageTagAssignments adds the "image_tag_assignments" edges to the ImageTagAssignment entity.
func (itc *ImageTagCreate) AddImageTagAssignments(i ...*ImageTagAssignment) *ImageTagCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return itc.AddImageTagAssignmentIDs(ids...)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (itc *ImageTagCreate) SetCreatedByID(id uuid.UUID) *ImageTagCreate {
	itc.mutation.SetCreatedByID(id)
	return itc
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (itc *ImageTagCreate) SetNillableCreatedByID(id *uuid.UUID) *ImageTagCreate {
	if id != nil {
		itc = itc.SetCreatedByID(*id)
	}
	return itc
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (itc *ImageTagCreate) SetCreatedBy(u *User) *ImageTagCreate {
	return itc.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (itc *ImageTagCreate) SetUpdatedByID(id uuid.UUID) *ImageTagCreate {
	itc.mutation.SetUpdatedByID(id)
	return itc
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (itc *ImageTagCreate) SetNillableUpdatedByID(id *uuid.UUID) *ImageTagCreate {
	if id != nil {
		itc = itc.SetUpdatedByID(*id)
	}
	return itc
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (itc *ImageTagCreate) SetUpdatedBy(u *User) *ImageTagCreate {
	return itc.SetUpdatedByID(u.ID)
}

// Mutation returns the ImageTagMutation object of the builder.
func (itc *ImageTagCreate) Mutation() *ImageTagMutation {
	return itc.mutation
}

// Save creates the ImageTag in the database.
func (itc *ImageTagCreate) Save(ctx context.Context) (*ImageTag, error) {
	itc.defaults()
	return withHooks(ctx, itc.sqlSave, itc.mutation, itc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (itc *ImageTagCreate) SaveX(ctx context.Context) *ImageTag {
	v, err := itc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itc *ImageTagCreate) Exec(ctx context.Context) error {
	_, err := itc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itc *ImageTagCreate) ExecX(ctx context.Context) {
	if err := itc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (itc *ImageTagCreate) defaults() {
	if _, ok := itc.mutation.CreatedAt(); !ok {
		v := imagetag.DefaultCreatedAt()
		itc.mutation.SetCreatedAt(v)
	}
	if _, ok := itc.mutation.UpdatedAt(); !ok {
		v := imagetag.DefaultUpdatedAt()
		itc.mutation.SetUpdatedAt(v)
	}
	if _, ok := itc.mutation.IsAlbum(); !ok {
		v := imagetag.DefaultIsAlbum
		itc.mutation.SetIsAlbum(v)
	}
	if _, ok := itc.mutation.GetType(); !ok {
		v := imagetag.DefaultType
		itc.mutation.SetType(v)
	}
	if _, ok := itc.mutation.ID(); !ok {
		v := imagetag.DefaultID()
		itc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itc *ImageTagCreate) check() error {
	if _, ok := itc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ImageTag.created_at"`)}
	}
	if _, ok := itc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ImageTag.updated_at"`)}
	}
	if _, ok := itc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ImageTag.name"`)}
	}
	if v, ok := itc.mutation.Name(); ok {
		if err := imagetag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ImageTag.name": %w`, err)}
		}
	}
	if _, ok := itc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "ImageTag.description"`)}
	}
	if v, ok := itc.mutation.Description(); ok {
		if err := imagetag.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "ImageTag.description": %w`, err)}
		}
	}
	if _, ok := itc.mutation.IsAlbum(); !ok {
		return &ValidationError{Name: "is_album", err: errors.New(`ent: missing required field "ImageTag.is_album"`)}
	}
	if _, ok := itc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ImageTag.type"`)}
	}
	if v, ok := itc.mutation.GetType(); ok {
		if err := imagetag.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ImageTag.type": %w`, err)}
		}
	}
	return nil
}

func (itc *ImageTagCreate) sqlSave(ctx context.Context) (*ImageTag, error) {
	if err := itc.check(); err != nil {
		return nil, err
	}
	_node, _spec := itc.createSpec()
	if err := sqlgraph.CreateNode(ctx, itc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	itc.mutation.id = &_node.ID
	itc.mutation.done = true
	return _node, nil
}

func (itc *ImageTagCreate) createSpec() (*ImageTag, *sqlgraph.CreateSpec) {
	var (
		_node = &ImageTag{config: itc.config}
		_spec = sqlgraph.NewCreateSpec(imagetag.Table, sqlgraph.NewFieldSpec(imagetag.FieldID, field.TypeUUID))
	)
	if id, ok := itc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := itc.mutation.CreatedAt(); ok {
		_spec.SetField(imagetag.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := itc.mutation.UpdatedAt(); ok {
		_spec.SetField(imagetag.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := itc.mutation.Name(); ok {
		_spec.SetField(imagetag.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := itc.mutation.Description(); ok {
		_spec.SetField(imagetag.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := itc.mutation.IsAlbum(); ok {
		_spec.SetField(imagetag.FieldIsAlbum, field.TypeBool, value)
		_node.IsAlbum = value
	}
	if value, ok := itc.mutation.GetType(); ok {
		_spec.SetField(imagetag.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if nodes := itc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetag.ProjectTable,
			Columns: []string{imagetag.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.image_tag_project = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := itc.mutation.ImageTagAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imagetag.ImageTagAssignmentsTable,
			Columns: []string{imagetag.ImageTagAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagetagassignment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := itc.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetag.CreatedByTable,
			Columns: []string{imagetag.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.image_tag_created_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := itc.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetag.UpdatedByTable,
			Columns: []string{imagetag.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.image_tag_updated_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImageTagCreateBulk is the builder for creating many ImageTag entities in bulk.
type ImageTagCreateBulk struct {
	config
	builders []*ImageTagCreate
}

// Save creates the ImageTag entities in the database.
func (itcb *ImageTagCreateBulk) Save(ctx context.Context) ([]*ImageTag, error) {
	specs := make([]*sqlgraph.CreateSpec, len(itcb.builders))
	nodes := make([]*ImageTag, len(itcb.builders))
	mutators := make([]Mutator, len(itcb.builders))
	for i := range itcb.builders {
		func(i int, root context.Context) {
			builder := itcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImageTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, itcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, itcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, itcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (itcb *ImageTagCreateBulk) SaveX(ctx context.Context) []*ImageTag {
	v, err := itcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (itcb *ImageTagCreateBulk) Exec(ctx context.Context) error {
	_, err := itcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itcb *ImageTagCreateBulk) ExecX(ctx context.Context) {
	if err := itcb.Exec(ctx); err != nil {
		panic(err)
	}
}
