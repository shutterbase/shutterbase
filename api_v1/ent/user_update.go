// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/apikey"
	"github.com/shutterbase/shutterbase/ent/camera"
	"github.com/shutterbase/shutterbase/ent/image"
	"github.com/shutterbase/shutterbase/ent/predicate"
	"github.com/shutterbase/shutterbase/ent/projectassignment"
	"github.com/shutterbase/shutterbase/ent/role"
	"github.com/shutterbase/shutterbase/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetFirstName sets the "first_name" field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetLastName sets the "last_name" field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetCopyrightTag sets the "copyright_tag" field.
func (uu *UserUpdate) SetCopyrightTag(s string) *UserUpdate {
	uu.mutation.SetCopyrightTag(s)
	return uu
}

// SetEmailValidated sets the "email_validated" field.
func (uu *UserUpdate) SetEmailValidated(b bool) *UserUpdate {
	uu.mutation.SetEmailValidated(b)
	return uu
}

// SetNillableEmailValidated sets the "email_validated" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailValidated(b *bool) *UserUpdate {
	if b != nil {
		uu.SetEmailValidated(*b)
	}
	return uu
}

// SetValidationKey sets the "validation_key" field.
func (uu *UserUpdate) SetValidationKey(u uuid.UUID) *UserUpdate {
	uu.mutation.SetValidationKey(u)
	return uu
}

// SetNillableValidationKey sets the "validation_key" field if the given value is not nil.
func (uu *UserUpdate) SetNillableValidationKey(u *uuid.UUID) *UserUpdate {
	if u != nil {
		uu.SetValidationKey(*u)
	}
	return uu
}

// SetValidationSentAt sets the "validation_sent_at" field.
func (uu *UserUpdate) SetValidationSentAt(t time.Time) *UserUpdate {
	uu.mutation.SetValidationSentAt(t)
	return uu
}

// SetNillableValidationSentAt sets the "validation_sent_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableValidationSentAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetValidationSentAt(*t)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(b []byte) *UserUpdate {
	uu.mutation.SetPassword(b)
	return uu
}

// SetPasswordResetKey sets the "password_reset_key" field.
func (uu *UserUpdate) SetPasswordResetKey(u uuid.UUID) *UserUpdate {
	uu.mutation.SetPasswordResetKey(u)
	return uu
}

// SetNillablePasswordResetKey sets the "password_reset_key" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswordResetKey(u *uuid.UUID) *UserUpdate {
	if u != nil {
		uu.SetPasswordResetKey(*u)
	}
	return uu
}

// SetPasswordResetAt sets the "password_reset_at" field.
func (uu *UserUpdate) SetPasswordResetAt(t time.Time) *UserUpdate {
	uu.mutation.SetPasswordResetAt(t)
	return uu
}

// SetNillablePasswordResetAt sets the "password_reset_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswordResetAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetPasswordResetAt(*t)
	}
	return uu
}

// SetActive sets the "active" field.
func (uu *UserUpdate) SetActive(b bool) *UserUpdate {
	uu.mutation.SetActive(b)
	return uu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (uu *UserUpdate) SetNillableActive(b *bool) *UserUpdate {
	if b != nil {
		uu.SetActive(*b)
	}
	return uu
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (uu *UserUpdate) SetRoleID(id uuid.UUID) *UserUpdate {
	uu.mutation.SetRoleID(id)
	return uu
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableRoleID(id *uuid.UUID) *UserUpdate {
	if id != nil {
		uu = uu.SetRoleID(*id)
	}
	return uu
}

// SetRole sets the "role" edge to the Role entity.
func (uu *UserUpdate) SetRole(r *Role) *UserUpdate {
	return uu.SetRoleID(r.ID)
}

// AddProjectAssignmentIDs adds the "projectAssignments" edge to the ProjectAssignment entity by IDs.
func (uu *UserUpdate) AddProjectAssignmentIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddProjectAssignmentIDs(ids...)
	return uu
}

// AddProjectAssignments adds the "projectAssignments" edges to the ProjectAssignment entity.
func (uu *UserUpdate) AddProjectAssignments(p ...*ProjectAssignment) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddProjectAssignmentIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (uu *UserUpdate) AddImageIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddImageIDs(ids...)
	return uu
}

// AddImages adds the "images" edges to the Image entity.
func (uu *UserUpdate) AddImages(i ...*Image) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddImageIDs(ids...)
}

// AddCameraIDs adds the "cameras" edge to the Camera entity by IDs.
func (uu *UserUpdate) AddCameraIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddCameraIDs(ids...)
	return uu
}

// AddCameras adds the "cameras" edges to the Camera entity.
func (uu *UserUpdate) AddCameras(c ...*Camera) *UserUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCameraIDs(ids...)
}

// AddApiKeyIDs adds the "apiKey" edge to the ApiKey entity by IDs.
func (uu *UserUpdate) AddApiKeyIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddApiKeyIDs(ids...)
	return uu
}

// AddApiKey adds the "apiKey" edges to the ApiKey entity.
func (uu *UserUpdate) AddApiKey(a ...*ApiKey) *UserUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddApiKeyIDs(ids...)
}

// AddCreatedUserIDs adds the "created_users" edge to the User entity by IDs.
func (uu *UserUpdate) AddCreatedUserIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddCreatedUserIDs(ids...)
	return uu
}

// AddCreatedUsers adds the "created_users" edges to the User entity.
func (uu *UserUpdate) AddCreatedUsers(u ...*User) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddCreatedUserIDs(ids...)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (uu *UserUpdate) SetCreatedByID(id uuid.UUID) *UserUpdate {
	uu.mutation.SetCreatedByID(id)
	return uu
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedByID(id *uuid.UUID) *UserUpdate {
	if id != nil {
		uu = uu.SetCreatedByID(*id)
	}
	return uu
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (uu *UserUpdate) SetCreatedBy(u *User) *UserUpdate {
	return uu.SetCreatedByID(u.ID)
}

// AddModifiedUserIDs adds the "modified_users" edge to the User entity by IDs.
func (uu *UserUpdate) AddModifiedUserIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddModifiedUserIDs(ids...)
	return uu
}

// AddModifiedUsers adds the "modified_users" edges to the User entity.
func (uu *UserUpdate) AddModifiedUsers(u ...*User) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddModifiedUserIDs(ids...)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (uu *UserUpdate) SetUpdatedByID(id uuid.UUID) *UserUpdate {
	uu.mutation.SetUpdatedByID(id)
	return uu
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedByID(id *uuid.UUID) *UserUpdate {
	if id != nil {
		uu = uu.SetUpdatedByID(*id)
	}
	return uu
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (uu *UserUpdate) SetUpdatedBy(u *User) *UserUpdate {
	return uu.SetUpdatedByID(u.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (uu *UserUpdate) ClearRole() *UserUpdate {
	uu.mutation.ClearRole()
	return uu
}

// ClearProjectAssignments clears all "projectAssignments" edges to the ProjectAssignment entity.
func (uu *UserUpdate) ClearProjectAssignments() *UserUpdate {
	uu.mutation.ClearProjectAssignments()
	return uu
}

// RemoveProjectAssignmentIDs removes the "projectAssignments" edge to ProjectAssignment entities by IDs.
func (uu *UserUpdate) RemoveProjectAssignmentIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveProjectAssignmentIDs(ids...)
	return uu
}

// RemoveProjectAssignments removes "projectAssignments" edges to ProjectAssignment entities.
func (uu *UserUpdate) RemoveProjectAssignments(p ...*ProjectAssignment) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveProjectAssignmentIDs(ids...)
}

// ClearImages clears all "images" edges to the Image entity.
func (uu *UserUpdate) ClearImages() *UserUpdate {
	uu.mutation.ClearImages()
	return uu
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (uu *UserUpdate) RemoveImageIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveImageIDs(ids...)
	return uu
}

// RemoveImages removes "images" edges to Image entities.
func (uu *UserUpdate) RemoveImages(i ...*Image) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveImageIDs(ids...)
}

// ClearCameras clears all "cameras" edges to the Camera entity.
func (uu *UserUpdate) ClearCameras() *UserUpdate {
	uu.mutation.ClearCameras()
	return uu
}

// RemoveCameraIDs removes the "cameras" edge to Camera entities by IDs.
func (uu *UserUpdate) RemoveCameraIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveCameraIDs(ids...)
	return uu
}

// RemoveCameras removes "cameras" edges to Camera entities.
func (uu *UserUpdate) RemoveCameras(c ...*Camera) *UserUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCameraIDs(ids...)
}

// ClearApiKey clears all "apiKey" edges to the ApiKey entity.
func (uu *UserUpdate) ClearApiKey() *UserUpdate {
	uu.mutation.ClearApiKey()
	return uu
}

// RemoveApiKeyIDs removes the "apiKey" edge to ApiKey entities by IDs.
func (uu *UserUpdate) RemoveApiKeyIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveApiKeyIDs(ids...)
	return uu
}

// RemoveApiKey removes "apiKey" edges to ApiKey entities.
func (uu *UserUpdate) RemoveApiKey(a ...*ApiKey) *UserUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveApiKeyIDs(ids...)
}

// ClearCreatedUsers clears all "created_users" edges to the User entity.
func (uu *UserUpdate) ClearCreatedUsers() *UserUpdate {
	uu.mutation.ClearCreatedUsers()
	return uu
}

// RemoveCreatedUserIDs removes the "created_users" edge to User entities by IDs.
func (uu *UserUpdate) RemoveCreatedUserIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveCreatedUserIDs(ids...)
	return uu
}

// RemoveCreatedUsers removes "created_users" edges to User entities.
func (uu *UserUpdate) RemoveCreatedUsers(u ...*User) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveCreatedUserIDs(ids...)
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (uu *UserUpdate) ClearCreatedBy() *UserUpdate {
	uu.mutation.ClearCreatedBy()
	return uu
}

// ClearModifiedUsers clears all "modified_users" edges to the User entity.
func (uu *UserUpdate) ClearModifiedUsers() *UserUpdate {
	uu.mutation.ClearModifiedUsers()
	return uu
}

// RemoveModifiedUserIDs removes the "modified_users" edge to User entities by IDs.
func (uu *UserUpdate) RemoveModifiedUserIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveModifiedUserIDs(ids...)
	return uu
}

// RemoveModifiedUsers removes "modified_users" edges to User entities.
func (uu *UserUpdate) RemoveModifiedUsers(u ...*User) *UserUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveModifiedUserIDs(ids...)
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (uu *UserUpdate) ClearUpdatedBy() *UserUpdate {
	uu.mutation.ClearUpdatedBy()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.CopyrightTag(); ok {
		if err := user.CopyrightTagValidator(v); err != nil {
			return &ValidationError{Name: "copyright_tag", err: fmt.Errorf(`ent: validator failed for field "User.copyright_tag": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uu.mutation.CopyrightTag(); ok {
		_spec.SetField(user.FieldCopyrightTag, field.TypeString, value)
	}
	if value, ok := uu.mutation.EmailValidated(); ok {
		_spec.SetField(user.FieldEmailValidated, field.TypeBool, value)
	}
	if value, ok := uu.mutation.ValidationKey(); ok {
		_spec.SetField(user.FieldValidationKey, field.TypeUUID, value)
	}
	if value, ok := uu.mutation.ValidationSentAt(); ok {
		_spec.SetField(user.FieldValidationSentAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeBytes, value)
	}
	if value, ok := uu.mutation.PasswordResetKey(); ok {
		_spec.SetField(user.FieldPasswordResetKey, field.TypeUUID, value)
	}
	if value, ok := uu.mutation.PasswordResetAt(); ok {
		_spec.SetField(user.FieldPasswordResetAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Active(); ok {
		_spec.SetField(user.FieldActive, field.TypeBool, value)
	}
	if uu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.RoleTable,
			Columns: []string{user.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.RoleTable,
			Columns: []string{user.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ProjectAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ProjectAssignmentsTable,
			Columns: []string{user.ProjectAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectassignment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedProjectAssignmentsIDs(); len(nodes) > 0 && !uu.mutation.ProjectAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ProjectAssignmentsTable,
			Columns: []string{user.ProjectAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectassignment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ProjectAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ProjectAssignmentsTable,
			Columns: []string{user.ProjectAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectassignment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ImagesTable,
			Columns: []string{user.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedImagesIDs(); len(nodes) > 0 && !uu.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ImagesTable,
			Columns: []string{user.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ImagesTable,
			Columns: []string{user.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CamerasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CamerasTable,
			Columns: []string{user.CamerasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCamerasIDs(); len(nodes) > 0 && !uu.mutation.CamerasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CamerasTable,
			Columns: []string{user.CamerasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CamerasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CamerasTable,
			Columns: []string{user.CamerasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ApiKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ApiKeyTable,
			Columns: []string{user.ApiKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedApiKeyIDs(); len(nodes) > 0 && !uu.mutation.ApiKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ApiKeyTable,
			Columns: []string{user.ApiKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ApiKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ApiKeyTable,
			Columns: []string{user.ApiKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CreatedUsersTable,
			Columns: []string{user.CreatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCreatedUsersIDs(); len(nodes) > 0 && !uu.mutation.CreatedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CreatedUsersTable,
			Columns: []string{user.CreatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CreatedUsersTable,
			Columns: []string{user.CreatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CreatedByTable,
			Columns: []string{user.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CreatedByTable,
			Columns: []string{user.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ModifiedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ModifiedUsersTable,
			Columns: []string{user.ModifiedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedModifiedUsersIDs(); len(nodes) > 0 && !uu.mutation.ModifiedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ModifiedUsersTable,
			Columns: []string{user.ModifiedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ModifiedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ModifiedUsersTable,
			Columns: []string{user.ModifiedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.UpdatedByTable,
			Columns: []string{user.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.UpdatedByTable,
			Columns: []string{user.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetFirstName sets the "first_name" field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetLastName sets the "last_name" field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetCopyrightTag sets the "copyright_tag" field.
func (uuo *UserUpdateOne) SetCopyrightTag(s string) *UserUpdateOne {
	uuo.mutation.SetCopyrightTag(s)
	return uuo
}

// SetEmailValidated sets the "email_validated" field.
func (uuo *UserUpdateOne) SetEmailValidated(b bool) *UserUpdateOne {
	uuo.mutation.SetEmailValidated(b)
	return uuo
}

// SetNillableEmailValidated sets the "email_validated" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailValidated(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetEmailValidated(*b)
	}
	return uuo
}

// SetValidationKey sets the "validation_key" field.
func (uuo *UserUpdateOne) SetValidationKey(u uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetValidationKey(u)
	return uuo
}

// SetNillableValidationKey sets the "validation_key" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableValidationKey(u *uuid.UUID) *UserUpdateOne {
	if u != nil {
		uuo.SetValidationKey(*u)
	}
	return uuo
}

// SetValidationSentAt sets the "validation_sent_at" field.
func (uuo *UserUpdateOne) SetValidationSentAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetValidationSentAt(t)
	return uuo
}

// SetNillableValidationSentAt sets the "validation_sent_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableValidationSentAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetValidationSentAt(*t)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(b []byte) *UserUpdateOne {
	uuo.mutation.SetPassword(b)
	return uuo
}

// SetPasswordResetKey sets the "password_reset_key" field.
func (uuo *UserUpdateOne) SetPasswordResetKey(u uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetPasswordResetKey(u)
	return uuo
}

// SetNillablePasswordResetKey sets the "password_reset_key" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswordResetKey(u *uuid.UUID) *UserUpdateOne {
	if u != nil {
		uuo.SetPasswordResetKey(*u)
	}
	return uuo
}

// SetPasswordResetAt sets the "password_reset_at" field.
func (uuo *UserUpdateOne) SetPasswordResetAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetPasswordResetAt(t)
	return uuo
}

// SetNillablePasswordResetAt sets the "password_reset_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswordResetAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetPasswordResetAt(*t)
	}
	return uuo
}

// SetActive sets the "active" field.
func (uuo *UserUpdateOne) SetActive(b bool) *UserUpdateOne {
	uuo.mutation.SetActive(b)
	return uuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableActive(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetActive(*b)
	}
	return uuo
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (uuo *UserUpdateOne) SetRoleID(id uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetRoleID(id)
	return uuo
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRoleID(id *uuid.UUID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetRoleID(*id)
	}
	return uuo
}

// SetRole sets the "role" edge to the Role entity.
func (uuo *UserUpdateOne) SetRole(r *Role) *UserUpdateOne {
	return uuo.SetRoleID(r.ID)
}

// AddProjectAssignmentIDs adds the "projectAssignments" edge to the ProjectAssignment entity by IDs.
func (uuo *UserUpdateOne) AddProjectAssignmentIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddProjectAssignmentIDs(ids...)
	return uuo
}

// AddProjectAssignments adds the "projectAssignments" edges to the ProjectAssignment entity.
func (uuo *UserUpdateOne) AddProjectAssignments(p ...*ProjectAssignment) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddProjectAssignmentIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (uuo *UserUpdateOne) AddImageIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddImageIDs(ids...)
	return uuo
}

// AddImages adds the "images" edges to the Image entity.
func (uuo *UserUpdateOne) AddImages(i ...*Image) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddImageIDs(ids...)
}

// AddCameraIDs adds the "cameras" edge to the Camera entity by IDs.
func (uuo *UserUpdateOne) AddCameraIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddCameraIDs(ids...)
	return uuo
}

// AddCameras adds the "cameras" edges to the Camera entity.
func (uuo *UserUpdateOne) AddCameras(c ...*Camera) *UserUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCameraIDs(ids...)
}

// AddApiKeyIDs adds the "apiKey" edge to the ApiKey entity by IDs.
func (uuo *UserUpdateOne) AddApiKeyIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddApiKeyIDs(ids...)
	return uuo
}

// AddApiKey adds the "apiKey" edges to the ApiKey entity.
func (uuo *UserUpdateOne) AddApiKey(a ...*ApiKey) *UserUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddApiKeyIDs(ids...)
}

// AddCreatedUserIDs adds the "created_users" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddCreatedUserIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddCreatedUserIDs(ids...)
	return uuo
}

// AddCreatedUsers adds the "created_users" edges to the User entity.
func (uuo *UserUpdateOne) AddCreatedUsers(u ...*User) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddCreatedUserIDs(ids...)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (uuo *UserUpdateOne) SetCreatedByID(id uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetCreatedByID(id)
	return uuo
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedByID(id *uuid.UUID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetCreatedByID(*id)
	}
	return uuo
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (uuo *UserUpdateOne) SetCreatedBy(u *User) *UserUpdateOne {
	return uuo.SetCreatedByID(u.ID)
}

// AddModifiedUserIDs adds the "modified_users" edge to the User entity by IDs.
func (uuo *UserUpdateOne) AddModifiedUserIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddModifiedUserIDs(ids...)
	return uuo
}

// AddModifiedUsers adds the "modified_users" edges to the User entity.
func (uuo *UserUpdateOne) AddModifiedUsers(u ...*User) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddModifiedUserIDs(ids...)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (uuo *UserUpdateOne) SetUpdatedByID(id uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetUpdatedByID(id)
	return uuo
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedByID(id *uuid.UUID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetUpdatedByID(*id)
	}
	return uuo
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (uuo *UserUpdateOne) SetUpdatedBy(u *User) *UserUpdateOne {
	return uuo.SetUpdatedByID(u.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (uuo *UserUpdateOne) ClearRole() *UserUpdateOne {
	uuo.mutation.ClearRole()
	return uuo
}

// ClearProjectAssignments clears all "projectAssignments" edges to the ProjectAssignment entity.
func (uuo *UserUpdateOne) ClearProjectAssignments() *UserUpdateOne {
	uuo.mutation.ClearProjectAssignments()
	return uuo
}

// RemoveProjectAssignmentIDs removes the "projectAssignments" edge to ProjectAssignment entities by IDs.
func (uuo *UserUpdateOne) RemoveProjectAssignmentIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveProjectAssignmentIDs(ids...)
	return uuo
}

// RemoveProjectAssignments removes "projectAssignments" edges to ProjectAssignment entities.
func (uuo *UserUpdateOne) RemoveProjectAssignments(p ...*ProjectAssignment) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveProjectAssignmentIDs(ids...)
}

// ClearImages clears all "images" edges to the Image entity.
func (uuo *UserUpdateOne) ClearImages() *UserUpdateOne {
	uuo.mutation.ClearImages()
	return uuo
}

// RemoveImageIDs removes the "images" edge to Image entities by IDs.
func (uuo *UserUpdateOne) RemoveImageIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveImageIDs(ids...)
	return uuo
}

// RemoveImages removes "images" edges to Image entities.
func (uuo *UserUpdateOne) RemoveImages(i ...*Image) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveImageIDs(ids...)
}

// ClearCameras clears all "cameras" edges to the Camera entity.
func (uuo *UserUpdateOne) ClearCameras() *UserUpdateOne {
	uuo.mutation.ClearCameras()
	return uuo
}

// RemoveCameraIDs removes the "cameras" edge to Camera entities by IDs.
func (uuo *UserUpdateOne) RemoveCameraIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveCameraIDs(ids...)
	return uuo
}

// RemoveCameras removes "cameras" edges to Camera entities.
func (uuo *UserUpdateOne) RemoveCameras(c ...*Camera) *UserUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCameraIDs(ids...)
}

// ClearApiKey clears all "apiKey" edges to the ApiKey entity.
func (uuo *UserUpdateOne) ClearApiKey() *UserUpdateOne {
	uuo.mutation.ClearApiKey()
	return uuo
}

// RemoveApiKeyIDs removes the "apiKey" edge to ApiKey entities by IDs.
func (uuo *UserUpdateOne) RemoveApiKeyIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveApiKeyIDs(ids...)
	return uuo
}

// RemoveApiKey removes "apiKey" edges to ApiKey entities.
func (uuo *UserUpdateOne) RemoveApiKey(a ...*ApiKey) *UserUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveApiKeyIDs(ids...)
}

// ClearCreatedUsers clears all "created_users" edges to the User entity.
func (uuo *UserUpdateOne) ClearCreatedUsers() *UserUpdateOne {
	uuo.mutation.ClearCreatedUsers()
	return uuo
}

// RemoveCreatedUserIDs removes the "created_users" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveCreatedUserIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveCreatedUserIDs(ids...)
	return uuo
}

// RemoveCreatedUsers removes "created_users" edges to User entities.
func (uuo *UserUpdateOne) RemoveCreatedUsers(u ...*User) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveCreatedUserIDs(ids...)
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (uuo *UserUpdateOne) ClearCreatedBy() *UserUpdateOne {
	uuo.mutation.ClearCreatedBy()
	return uuo
}

// ClearModifiedUsers clears all "modified_users" edges to the User entity.
func (uuo *UserUpdateOne) ClearModifiedUsers() *UserUpdateOne {
	uuo.mutation.ClearModifiedUsers()
	return uuo
}

// RemoveModifiedUserIDs removes the "modified_users" edge to User entities by IDs.
func (uuo *UserUpdateOne) RemoveModifiedUserIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveModifiedUserIDs(ids...)
	return uuo
}

// RemoveModifiedUsers removes "modified_users" edges to User entities.
func (uuo *UserUpdateOne) RemoveModifiedUsers(u ...*User) *UserUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveModifiedUserIDs(ids...)
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (uuo *UserUpdateOne) ClearUpdatedBy() *UserUpdateOne {
	uuo.mutation.ClearUpdatedBy()
	return uuo
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.CopyrightTag(); ok {
		if err := user.CopyrightTagValidator(v); err != nil {
			return &ValidationError{Name: "copyright_tag", err: fmt.Errorf(`ent: validator failed for field "User.copyright_tag": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.CopyrightTag(); ok {
		_spec.SetField(user.FieldCopyrightTag, field.TypeString, value)
	}
	if value, ok := uuo.mutation.EmailValidated(); ok {
		_spec.SetField(user.FieldEmailValidated, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.ValidationKey(); ok {
		_spec.SetField(user.FieldValidationKey, field.TypeUUID, value)
	}
	if value, ok := uuo.mutation.ValidationSentAt(); ok {
		_spec.SetField(user.FieldValidationSentAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeBytes, value)
	}
	if value, ok := uuo.mutation.PasswordResetKey(); ok {
		_spec.SetField(user.FieldPasswordResetKey, field.TypeUUID, value)
	}
	if value, ok := uuo.mutation.PasswordResetAt(); ok {
		_spec.SetField(user.FieldPasswordResetAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Active(); ok {
		_spec.SetField(user.FieldActive, field.TypeBool, value)
	}
	if uuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.RoleTable,
			Columns: []string{user.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.RoleTable,
			Columns: []string{user.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ProjectAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ProjectAssignmentsTable,
			Columns: []string{user.ProjectAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectassignment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedProjectAssignmentsIDs(); len(nodes) > 0 && !uuo.mutation.ProjectAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ProjectAssignmentsTable,
			Columns: []string{user.ProjectAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectassignment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ProjectAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ProjectAssignmentsTable,
			Columns: []string{user.ProjectAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectassignment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ImagesTable,
			Columns: []string{user.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !uuo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ImagesTable,
			Columns: []string{user.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ImagesTable,
			Columns: []string{user.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CamerasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CamerasTable,
			Columns: []string{user.CamerasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCamerasIDs(); len(nodes) > 0 && !uuo.mutation.CamerasCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CamerasTable,
			Columns: []string{user.CamerasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CamerasIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CamerasTable,
			Columns: []string{user.CamerasColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ApiKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ApiKeyTable,
			Columns: []string{user.ApiKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedApiKeyIDs(); len(nodes) > 0 && !uuo.mutation.ApiKeyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ApiKeyTable,
			Columns: []string{user.ApiKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ApiKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ApiKeyTable,
			Columns: []string{user.ApiKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apikey.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CreatedUsersTable,
			Columns: []string{user.CreatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCreatedUsersIDs(); len(nodes) > 0 && !uuo.mutation.CreatedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CreatedUsersTable,
			Columns: []string{user.CreatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CreatedUsersTable,
			Columns: []string{user.CreatedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CreatedByTable,
			Columns: []string{user.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.CreatedByTable,
			Columns: []string{user.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ModifiedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ModifiedUsersTable,
			Columns: []string{user.ModifiedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedModifiedUsersIDs(); len(nodes) > 0 && !uuo.mutation.ModifiedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ModifiedUsersTable,
			Columns: []string{user.ModifiedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ModifiedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.ModifiedUsersTable,
			Columns: []string{user.ModifiedUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.UpdatedByTable,
			Columns: []string{user.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.UpdatedByTable,
			Columns: []string{user.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
