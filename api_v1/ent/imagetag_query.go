// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/imagetag"
	"github.com/shutterbase/shutterbase/ent/imagetagassignment"
	"github.com/shutterbase/shutterbase/ent/predicate"
	"github.com/shutterbase/shutterbase/ent/project"
	"github.com/shutterbase/shutterbase/ent/user"
)

// ImageTagQuery is the builder for querying ImageTag entities.
type ImageTagQuery struct {
	config
	ctx                     *QueryContext
	order                   []imagetag.OrderOption
	inters                  []Interceptor
	predicates              []predicate.ImageTag
	withProject             *ProjectQuery
	withImageTagAssignments *ImageTagAssignmentQuery
	withCreatedBy           *UserQuery
	withUpdatedBy           *UserQuery
	withFKs                 bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ImageTagQuery builder.
func (itq *ImageTagQuery) Where(ps ...predicate.ImageTag) *ImageTagQuery {
	itq.predicates = append(itq.predicates, ps...)
	return itq
}

// Limit the number of records to be returned by this query.
func (itq *ImageTagQuery) Limit(limit int) *ImageTagQuery {
	itq.ctx.Limit = &limit
	return itq
}

// Offset to start from.
func (itq *ImageTagQuery) Offset(offset int) *ImageTagQuery {
	itq.ctx.Offset = &offset
	return itq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (itq *ImageTagQuery) Unique(unique bool) *ImageTagQuery {
	itq.ctx.Unique = &unique
	return itq
}

// Order specifies how the records should be ordered.
func (itq *ImageTagQuery) Order(o ...imagetag.OrderOption) *ImageTagQuery {
	itq.order = append(itq.order, o...)
	return itq
}

// QueryProject chains the current query on the "project" edge.
func (itq *ImageTagQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: itq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := itq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := itq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(imagetag.Table, imagetag.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, imagetag.ProjectTable, imagetag.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(itq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryImageTagAssignments chains the current query on the "image_tag_assignments" edge.
func (itq *ImageTagQuery) QueryImageTagAssignments() *ImageTagAssignmentQuery {
	query := (&ImageTagAssignmentClient{config: itq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := itq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := itq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(imagetag.Table, imagetag.FieldID, selector),
			sqlgraph.To(imagetagassignment.Table, imagetagassignment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, imagetag.ImageTagAssignmentsTable, imagetag.ImageTagAssignmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(itq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedBy chains the current query on the "created_by" edge.
func (itq *ImageTagQuery) QueryCreatedBy() *UserQuery {
	query := (&UserClient{config: itq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := itq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := itq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(imagetag.Table, imagetag.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, imagetag.CreatedByTable, imagetag.CreatedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(itq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdatedBy chains the current query on the "updated_by" edge.
func (itq *ImageTagQuery) QueryUpdatedBy() *UserQuery {
	query := (&UserClient{config: itq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := itq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := itq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(imagetag.Table, imagetag.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, imagetag.UpdatedByTable, imagetag.UpdatedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(itq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ImageTag entity from the query.
// Returns a *NotFoundError when no ImageTag was found.
func (itq *ImageTagQuery) First(ctx context.Context) (*ImageTag, error) {
	nodes, err := itq.Limit(1).All(setContextOp(ctx, itq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{imagetag.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (itq *ImageTagQuery) FirstX(ctx context.Context) *ImageTag {
	node, err := itq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ImageTag ID from the query.
// Returns a *NotFoundError when no ImageTag ID was found.
func (itq *ImageTagQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = itq.Limit(1).IDs(setContextOp(ctx, itq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{imagetag.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (itq *ImageTagQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := itq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ImageTag entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ImageTag entity is found.
// Returns a *NotFoundError when no ImageTag entities are found.
func (itq *ImageTagQuery) Only(ctx context.Context) (*ImageTag, error) {
	nodes, err := itq.Limit(2).All(setContextOp(ctx, itq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{imagetag.Label}
	default:
		return nil, &NotSingularError{imagetag.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (itq *ImageTagQuery) OnlyX(ctx context.Context) *ImageTag {
	node, err := itq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ImageTag ID in the query.
// Returns a *NotSingularError when more than one ImageTag ID is found.
// Returns a *NotFoundError when no entities are found.
func (itq *ImageTagQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = itq.Limit(2).IDs(setContextOp(ctx, itq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{imagetag.Label}
	default:
		err = &NotSingularError{imagetag.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (itq *ImageTagQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := itq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ImageTags.
func (itq *ImageTagQuery) All(ctx context.Context) ([]*ImageTag, error) {
	ctx = setContextOp(ctx, itq.ctx, "All")
	if err := itq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ImageTag, *ImageTagQuery]()
	return withInterceptors[[]*ImageTag](ctx, itq, qr, itq.inters)
}

// AllX is like All, but panics if an error occurs.
func (itq *ImageTagQuery) AllX(ctx context.Context) []*ImageTag {
	nodes, err := itq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ImageTag IDs.
func (itq *ImageTagQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if itq.ctx.Unique == nil && itq.path != nil {
		itq.Unique(true)
	}
	ctx = setContextOp(ctx, itq.ctx, "IDs")
	if err = itq.Select(imagetag.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (itq *ImageTagQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := itq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (itq *ImageTagQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, itq.ctx, "Count")
	if err := itq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, itq, querierCount[*ImageTagQuery](), itq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (itq *ImageTagQuery) CountX(ctx context.Context) int {
	count, err := itq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (itq *ImageTagQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, itq.ctx, "Exist")
	switch _, err := itq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (itq *ImageTagQuery) ExistX(ctx context.Context) bool {
	exist, err := itq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ImageTagQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (itq *ImageTagQuery) Clone() *ImageTagQuery {
	if itq == nil {
		return nil
	}
	return &ImageTagQuery{
		config:                  itq.config,
		ctx:                     itq.ctx.Clone(),
		order:                   append([]imagetag.OrderOption{}, itq.order...),
		inters:                  append([]Interceptor{}, itq.inters...),
		predicates:              append([]predicate.ImageTag{}, itq.predicates...),
		withProject:             itq.withProject.Clone(),
		withImageTagAssignments: itq.withImageTagAssignments.Clone(),
		withCreatedBy:           itq.withCreatedBy.Clone(),
		withUpdatedBy:           itq.withUpdatedBy.Clone(),
		// clone intermediate query.
		sql:  itq.sql.Clone(),
		path: itq.path,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (itq *ImageTagQuery) WithProject(opts ...func(*ProjectQuery)) *ImageTagQuery {
	query := (&ProjectClient{config: itq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	itq.withProject = query
	return itq
}

// WithImageTagAssignments tells the query-builder to eager-load the nodes that are connected to
// the "image_tag_assignments" edge. The optional arguments are used to configure the query builder of the edge.
func (itq *ImageTagQuery) WithImageTagAssignments(opts ...func(*ImageTagAssignmentQuery)) *ImageTagQuery {
	query := (&ImageTagAssignmentClient{config: itq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	itq.withImageTagAssignments = query
	return itq
}

// WithCreatedBy tells the query-builder to eager-load the nodes that are connected to
// the "created_by" edge. The optional arguments are used to configure the query builder of the edge.
func (itq *ImageTagQuery) WithCreatedBy(opts ...func(*UserQuery)) *ImageTagQuery {
	query := (&UserClient{config: itq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	itq.withCreatedBy = query
	return itq
}

// WithUpdatedBy tells the query-builder to eager-load the nodes that are connected to
// the "updated_by" edge. The optional arguments are used to configure the query builder of the edge.
func (itq *ImageTagQuery) WithUpdatedBy(opts ...func(*UserQuery)) *ImageTagQuery {
	query := (&UserClient{config: itq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	itq.withUpdatedBy = query
	return itq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ImageTag.Query().
//		GroupBy(imagetag.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (itq *ImageTagQuery) GroupBy(field string, fields ...string) *ImageTagGroupBy {
	itq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ImageTagGroupBy{build: itq}
	grbuild.flds = &itq.ctx.Fields
	grbuild.label = imagetag.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.ImageTag.Query().
//		Select(imagetag.FieldCreatedAt).
//		Scan(ctx, &v)
func (itq *ImageTagQuery) Select(fields ...string) *ImageTagSelect {
	itq.ctx.Fields = append(itq.ctx.Fields, fields...)
	sbuild := &ImageTagSelect{ImageTagQuery: itq}
	sbuild.label = imagetag.Label
	sbuild.flds, sbuild.scan = &itq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ImageTagSelect configured with the given aggregations.
func (itq *ImageTagQuery) Aggregate(fns ...AggregateFunc) *ImageTagSelect {
	return itq.Select().Aggregate(fns...)
}

func (itq *ImageTagQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range itq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, itq); err != nil {
				return err
			}
		}
	}
	for _, f := range itq.ctx.Fields {
		if !imagetag.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if itq.path != nil {
		prev, err := itq.path(ctx)
		if err != nil {
			return err
		}
		itq.sql = prev
	}
	return nil
}

func (itq *ImageTagQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ImageTag, error) {
	var (
		nodes       = []*ImageTag{}
		withFKs     = itq.withFKs
		_spec       = itq.querySpec()
		loadedTypes = [4]bool{
			itq.withProject != nil,
			itq.withImageTagAssignments != nil,
			itq.withCreatedBy != nil,
			itq.withUpdatedBy != nil,
		}
	)
	if itq.withProject != nil || itq.withCreatedBy != nil || itq.withUpdatedBy != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, imagetag.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ImageTag).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ImageTag{config: itq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, itq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := itq.withProject; query != nil {
		if err := itq.loadProject(ctx, query, nodes, nil,
			func(n *ImageTag, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	if query := itq.withImageTagAssignments; query != nil {
		if err := itq.loadImageTagAssignments(ctx, query, nodes,
			func(n *ImageTag) { n.Edges.ImageTagAssignments = []*ImageTagAssignment{} },
			func(n *ImageTag, e *ImageTagAssignment) {
				n.Edges.ImageTagAssignments = append(n.Edges.ImageTagAssignments, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := itq.withCreatedBy; query != nil {
		if err := itq.loadCreatedBy(ctx, query, nodes, nil,
			func(n *ImageTag, e *User) { n.Edges.CreatedBy = e }); err != nil {
			return nil, err
		}
	}
	if query := itq.withUpdatedBy; query != nil {
		if err := itq.loadUpdatedBy(ctx, query, nodes, nil,
			func(n *ImageTag, e *User) { n.Edges.UpdatedBy = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (itq *ImageTagQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*ImageTag, init func(*ImageTag), assign func(*ImageTag, *Project)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ImageTag)
	for i := range nodes {
		if nodes[i].image_tag_project == nil {
			continue
		}
		fk := *nodes[i].image_tag_project
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "image_tag_project" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (itq *ImageTagQuery) loadImageTagAssignments(ctx context.Context, query *ImageTagAssignmentQuery, nodes []*ImageTag, init func(*ImageTag), assign func(*ImageTag, *ImageTagAssignment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ImageTag)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ImageTagAssignment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(imagetag.ImageTagAssignmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.image_tag_assignment_image_tag
		if fk == nil {
			return fmt.Errorf(`foreign-key "image_tag_assignment_image_tag" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "image_tag_assignment_image_tag" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (itq *ImageTagQuery) loadCreatedBy(ctx context.Context, query *UserQuery, nodes []*ImageTag, init func(*ImageTag), assign func(*ImageTag, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ImageTag)
	for i := range nodes {
		if nodes[i].image_tag_created_by == nil {
			continue
		}
		fk := *nodes[i].image_tag_created_by
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "image_tag_created_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (itq *ImageTagQuery) loadUpdatedBy(ctx context.Context, query *UserQuery, nodes []*ImageTag, init func(*ImageTag), assign func(*ImageTag, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ImageTag)
	for i := range nodes {
		if nodes[i].image_tag_updated_by == nil {
			continue
		}
		fk := *nodes[i].image_tag_updated_by
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "image_tag_updated_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (itq *ImageTagQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := itq.querySpec()
	_spec.Node.Columns = itq.ctx.Fields
	if len(itq.ctx.Fields) > 0 {
		_spec.Unique = itq.ctx.Unique != nil && *itq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, itq.driver, _spec)
}

func (itq *ImageTagQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(imagetag.Table, imagetag.Columns, sqlgraph.NewFieldSpec(imagetag.FieldID, field.TypeUUID))
	_spec.From = itq.sql
	if unique := itq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if itq.path != nil {
		_spec.Unique = true
	}
	if fields := itq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imagetag.FieldID)
		for i := range fields {
			if fields[i] != imagetag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := itq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := itq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := itq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := itq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (itq *ImageTagQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(itq.driver.Dialect())
	t1 := builder.Table(imagetag.Table)
	columns := itq.ctx.Fields
	if len(columns) == 0 {
		columns = imagetag.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if itq.sql != nil {
		selector = itq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if itq.ctx.Unique != nil && *itq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range itq.predicates {
		p(selector)
	}
	for _, p := range itq.order {
		p(selector)
	}
	if offset := itq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := itq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ImageTagGroupBy is the group-by builder for ImageTag entities.
type ImageTagGroupBy struct {
	selector
	build *ImageTagQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (itgb *ImageTagGroupBy) Aggregate(fns ...AggregateFunc) *ImageTagGroupBy {
	itgb.fns = append(itgb.fns, fns...)
	return itgb
}

// Scan applies the selector query and scans the result into the given value.
func (itgb *ImageTagGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, itgb.build.ctx, "GroupBy")
	if err := itgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ImageTagQuery, *ImageTagGroupBy](ctx, itgb.build, itgb, itgb.build.inters, v)
}

func (itgb *ImageTagGroupBy) sqlScan(ctx context.Context, root *ImageTagQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(itgb.fns))
	for _, fn := range itgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*itgb.flds)+len(itgb.fns))
		for _, f := range *itgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*itgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := itgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ImageTagSelect is the builder for selecting fields of ImageTag entities.
type ImageTagSelect struct {
	*ImageTagQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (its *ImageTagSelect) Aggregate(fns ...AggregateFunc) *ImageTagSelect {
	its.fns = append(its.fns, fns...)
	return its
}

// Scan applies the selector query and scans the result into the given value.
func (its *ImageTagSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, its.ctx, "Select")
	if err := its.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ImageTagQuery, *ImageTagSelect](ctx, its.ImageTagQuery, its, its.inters, v)
}

func (its *ImageTagSelect) sqlScan(ctx context.Context, root *ImageTagQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(its.fns))
	for _, fn := range its.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*its.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := its.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
