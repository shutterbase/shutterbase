// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldCopyrightTag holds the string denoting the copyright_tag field in the database.
	FieldCopyrightTag = "copyright_tag"
	// FieldEmailValidated holds the string denoting the email_validated field in the database.
	FieldEmailValidated = "email_validated"
	// FieldValidationKey holds the string denoting the validation_key field in the database.
	FieldValidationKey = "validation_key"
	// FieldValidationSentAt holds the string denoting the validation_sent_at field in the database.
	FieldValidationSentAt = "validation_sent_at"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldPasswordResetKey holds the string denoting the password_reset_key field in the database.
	FieldPasswordResetKey = "password_reset_key"
	// FieldPasswordResetAt holds the string denoting the password_reset_at field in the database.
	FieldPasswordResetAt = "password_reset_at"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// EdgeRole holds the string denoting the role edge name in mutations.
	EdgeRole = "role"
	// EdgeProjectAssignments holds the string denoting the projectassignments edge name in mutations.
	EdgeProjectAssignments = "projectAssignments"
	// EdgeImages holds the string denoting the images edge name in mutations.
	EdgeImages = "images"
	// EdgeCameras holds the string denoting the cameras edge name in mutations.
	EdgeCameras = "cameras"
	// EdgeApiKey holds the string denoting the apikey edge name in mutations.
	EdgeApiKey = "apiKey"
	// EdgeCreatedUsers holds the string denoting the created_users edge name in mutations.
	EdgeCreatedUsers = "created_users"
	// EdgeCreatedBy holds the string denoting the created_by edge name in mutations.
	EdgeCreatedBy = "created_by"
	// EdgeModifiedUsers holds the string denoting the modified_users edge name in mutations.
	EdgeModifiedUsers = "modified_users"
	// EdgeUpdatedBy holds the string denoting the updated_by edge name in mutations.
	EdgeUpdatedBy = "updated_by"
	// Table holds the table name of the user in the database.
	Table = "users"
	// RoleTable is the table that holds the role relation/edge.
	RoleTable = "users"
	// RoleInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleInverseTable = "roles"
	// RoleColumn is the table column denoting the role relation/edge.
	RoleColumn = "user_role"
	// ProjectAssignmentsTable is the table that holds the projectAssignments relation/edge.
	ProjectAssignmentsTable = "project_assignments"
	// ProjectAssignmentsInverseTable is the table name for the ProjectAssignment entity.
	// It exists in this package in order to avoid circular dependency with the "projectassignment" package.
	ProjectAssignmentsInverseTable = "project_assignments"
	// ProjectAssignmentsColumn is the table column denoting the projectAssignments relation/edge.
	ProjectAssignmentsColumn = "project_assignment_user"
	// ImagesTable is the table that holds the images relation/edge.
	ImagesTable = "images"
	// ImagesInverseTable is the table name for the Image entity.
	// It exists in this package in order to avoid circular dependency with the "image" package.
	ImagesInverseTable = "images"
	// ImagesColumn is the table column denoting the images relation/edge.
	ImagesColumn = "image_user"
	// CamerasTable is the table that holds the cameras relation/edge.
	CamerasTable = "cameras"
	// CamerasInverseTable is the table name for the Camera entity.
	// It exists in this package in order to avoid circular dependency with the "camera" package.
	CamerasInverseTable = "cameras"
	// CamerasColumn is the table column denoting the cameras relation/edge.
	CamerasColumn = "camera_owner"
	// ApiKeyTable is the table that holds the apiKey relation/edge.
	ApiKeyTable = "api_keys"
	// ApiKeyInverseTable is the table name for the ApiKey entity.
	// It exists in this package in order to avoid circular dependency with the "apikey" package.
	ApiKeyInverseTable = "api_keys"
	// ApiKeyColumn is the table column denoting the apiKey relation/edge.
	ApiKeyColumn = "api_key_user"
	// CreatedUsersTable is the table that holds the created_users relation/edge.
	CreatedUsersTable = "users"
	// CreatedUsersColumn is the table column denoting the created_users relation/edge.
	CreatedUsersColumn = "user_created_by"
	// CreatedByTable is the table that holds the created_by relation/edge.
	CreatedByTable = "users"
	// CreatedByColumn is the table column denoting the created_by relation/edge.
	CreatedByColumn = "user_created_by"
	// ModifiedUsersTable is the table that holds the modified_users relation/edge.
	ModifiedUsersTable = "users"
	// ModifiedUsersColumn is the table column denoting the modified_users relation/edge.
	ModifiedUsersColumn = "user_updated_by"
	// UpdatedByTable is the table that holds the updated_by relation/edge.
	UpdatedByTable = "users"
	// UpdatedByColumn is the table column denoting the updated_by relation/edge.
	UpdatedByColumn = "user_updated_by"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldFirstName,
	FieldLastName,
	FieldEmail,
	FieldCopyrightTag,
	FieldEmailValidated,
	FieldValidationKey,
	FieldValidationSentAt,
	FieldPassword,
	FieldPasswordResetKey,
	FieldPasswordResetAt,
	FieldActive,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_role",
	"user_created_by",
	"user_updated_by",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// CopyrightTagValidator is a validator for the "copyright_tag" field. It is called by the builders before save.
	CopyrightTagValidator func(string) error
	// DefaultEmailValidated holds the default value on creation for the "email_validated" field.
	DefaultEmailValidated bool
	// DefaultValidationKey holds the default value on creation for the "validation_key" field.
	DefaultValidationKey func() uuid.UUID
	// DefaultValidationSentAt holds the default value on creation for the "validation_sent_at" field.
	DefaultValidationSentAt func() time.Time
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func([]byte) error
	// DefaultPasswordResetKey holds the default value on creation for the "password_reset_key" field.
	DefaultPasswordResetKey func() uuid.UUID
	// DefaultPasswordResetAt holds the default value on creation for the "password_reset_at" field.
	DefaultPasswordResetAt func() time.Time
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByCopyrightTag orders the results by the copyright_tag field.
func ByCopyrightTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCopyrightTag, opts...).ToFunc()
}

// ByEmailValidated orders the results by the email_validated field.
func ByEmailValidated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailValidated, opts...).ToFunc()
}

// ByValidationKey orders the results by the validation_key field.
func ByValidationKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidationKey, opts...).ToFunc()
}

// ByValidationSentAt orders the results by the validation_sent_at field.
func ByValidationSentAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidationSentAt, opts...).ToFunc()
}

// ByPasswordResetKey orders the results by the password_reset_key field.
func ByPasswordResetKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordResetKey, opts...).ToFunc()
}

// ByPasswordResetAt orders the results by the password_reset_at field.
func ByPasswordResetAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordResetAt, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByRoleField orders the results by role field.
func ByRoleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleStep(), sql.OrderByField(field, opts...))
	}
}

// ByProjectAssignmentsCount orders the results by projectAssignments count.
func ByProjectAssignmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProjectAssignmentsStep(), opts...)
	}
}

// ByProjectAssignments orders the results by projectAssignments terms.
func ByProjectAssignments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectAssignmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByImagesCount orders the results by images count.
func ByImagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newImagesStep(), opts...)
	}
}

// ByImages orders the results by images terms.
func ByImages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newImagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCamerasCount orders the results by cameras count.
func ByCamerasCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCamerasStep(), opts...)
	}
}

// ByCameras orders the results by cameras terms.
func ByCameras(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCamerasStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByApiKeyCount orders the results by apiKey count.
func ByApiKeyCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApiKeyStep(), opts...)
	}
}

// ByApiKey orders the results by apiKey terms.
func ByApiKey(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApiKeyStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedUsersCount orders the results by created_users count.
func ByCreatedUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedUsersStep(), opts...)
	}
}

// ByCreatedUsers orders the results by created_users terms.
func ByCreatedUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedByField orders the results by created_by field.
func ByCreatedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByModifiedUsersCount orders the results by modified_users count.
func ByModifiedUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newModifiedUsersStep(), opts...)
	}
}

// ByModifiedUsers orders the results by modified_users terms.
func ByModifiedUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModifiedUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUpdatedByField orders the results by updated_by field.
func ByUpdatedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdatedByStep(), sql.OrderByField(field, opts...))
	}
}
func newRoleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RoleTable, RoleColumn),
	)
}
func newProjectAssignmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectAssignmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ProjectAssignmentsTable, ProjectAssignmentsColumn),
	)
}
func newImagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ImagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ImagesTable, ImagesColumn),
	)
}
func newCamerasStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CamerasInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CamerasTable, CamerasColumn),
	)
}
func newApiKeyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApiKeyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ApiKeyTable, ApiKeyColumn),
	)
}
func newCreatedUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CreatedUsersTable, CreatedUsersColumn),
	)
}
func newCreatedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CreatedByTable, CreatedByColumn),
	)
}
func newModifiedUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ModifiedUsersTable, ModifiedUsersColumn),
	)
}
func newUpdatedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UpdatedByTable, UpdatedByColumn),
	)
}
