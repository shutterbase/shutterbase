// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/project"
	"github.com/shutterbase/shutterbase/ent/projectassignment"
	"github.com/shutterbase/shutterbase/ent/role"
	"github.com/shutterbase/shutterbase/ent/user"
)

// ProjectAssignment is the model entity for the ProjectAssignment schema.
type ProjectAssignment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectAssignmentQuery when eager-loading is set.
	Edges                         ProjectAssignmentEdges `json:"edges"`
	project_assignment_user       *uuid.UUID
	project_assignment_project    *uuid.UUID
	project_assignment_role       *uuid.UUID
	project_assignment_created_by *uuid.UUID
	project_assignment_updated_by *uuid.UUID
	selectValues                  sql.SelectValues
}

// ProjectAssignmentEdges holds the relations/edges for other nodes in the graph.
type ProjectAssignmentEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Role holds the value of the role edge.
	Role *Role `json:"role,omitempty"`
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"createdBy"`
	// UpdatedBy holds the value of the updated_by edge.
	UpdatedBy *User `json:"updatedBy"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectAssignmentEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectAssignmentEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[1] {
		if e.Project == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectAssignmentEdges) RoleOrErr() (*Role, error) {
	if e.loadedTypes[2] {
		if e.Role == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: role.Label}
		}
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectAssignmentEdges) CreatedByOrErr() (*User, error) {
	if e.loadedTypes[3] {
		if e.CreatedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreatedBy, nil
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// UpdatedByOrErr returns the UpdatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectAssignmentEdges) UpdatedByOrErr() (*User, error) {
	if e.loadedTypes[4] {
		if e.UpdatedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UpdatedBy, nil
	}
	return nil, &NotLoadedError{edge: "updated_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectAssignment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectassignment.FieldCreatedAt, projectassignment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case projectassignment.FieldID:
			values[i] = new(uuid.UUID)
		case projectassignment.ForeignKeys[0]: // project_assignment_user
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case projectassignment.ForeignKeys[1]: // project_assignment_project
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case projectassignment.ForeignKeys[2]: // project_assignment_role
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case projectassignment.ForeignKeys[3]: // project_assignment_created_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case projectassignment.ForeignKeys[4]: // project_assignment_updated_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectAssignment fields.
func (pa *ProjectAssignment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectassignment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pa.ID = *value
			}
		case projectassignment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case projectassignment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case projectassignment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_assignment_user", values[i])
			} else if value.Valid {
				pa.project_assignment_user = new(uuid.UUID)
				*pa.project_assignment_user = *value.S.(*uuid.UUID)
			}
		case projectassignment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_assignment_project", values[i])
			} else if value.Valid {
				pa.project_assignment_project = new(uuid.UUID)
				*pa.project_assignment_project = *value.S.(*uuid.UUID)
			}
		case projectassignment.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_assignment_role", values[i])
			} else if value.Valid {
				pa.project_assignment_role = new(uuid.UUID)
				*pa.project_assignment_role = *value.S.(*uuid.UUID)
			}
		case projectassignment.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_assignment_created_by", values[i])
			} else if value.Valid {
				pa.project_assignment_created_by = new(uuid.UUID)
				*pa.project_assignment_created_by = *value.S.(*uuid.UUID)
			}
		case projectassignment.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_assignment_updated_by", values[i])
			} else if value.Valid {
				pa.project_assignment_updated_by = new(uuid.UUID)
				*pa.project_assignment_updated_by = *value.S.(*uuid.UUID)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectAssignment.
// This includes values selected through modifiers, order, etc.
func (pa *ProjectAssignment) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the ProjectAssignment entity.
func (pa *ProjectAssignment) QueryUser() *UserQuery {
	return NewProjectAssignmentClient(pa.config).QueryUser(pa)
}

// QueryProject queries the "project" edge of the ProjectAssignment entity.
func (pa *ProjectAssignment) QueryProject() *ProjectQuery {
	return NewProjectAssignmentClient(pa.config).QueryProject(pa)
}

// QueryRole queries the "role" edge of the ProjectAssignment entity.
func (pa *ProjectAssignment) QueryRole() *RoleQuery {
	return NewProjectAssignmentClient(pa.config).QueryRole(pa)
}

// QueryCreatedBy queries the "created_by" edge of the ProjectAssignment entity.
func (pa *ProjectAssignment) QueryCreatedBy() *UserQuery {
	return NewProjectAssignmentClient(pa.config).QueryCreatedBy(pa)
}

// QueryUpdatedBy queries the "updated_by" edge of the ProjectAssignment entity.
func (pa *ProjectAssignment) QueryUpdatedBy() *UserQuery {
	return NewProjectAssignmentClient(pa.config).QueryUpdatedBy(pa)
}

// Update returns a builder for updating this ProjectAssignment.
// Note that you need to call ProjectAssignment.Unwrap() before calling this method if this ProjectAssignment
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *ProjectAssignment) Update() *ProjectAssignmentUpdateOne {
	return NewProjectAssignmentClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the ProjectAssignment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *ProjectAssignment) Unwrap() *ProjectAssignment {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectAssignment is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *ProjectAssignment) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectAssignment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProjectAssignments is a parsable slice of ProjectAssignment.
type ProjectAssignments []*ProjectAssignment
