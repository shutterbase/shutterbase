// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/role"
	"github.com/shutterbase/shutterbase/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"firstName"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"lastName"`
	// Email holds the value of the "email" field.
	Email string `json:"email"`
	// CopyrightTag holds the value of the "copyright_tag" field.
	CopyrightTag string `json:"copyrightTag"`
	// EmailValidated holds the value of the "email_validated" field.
	EmailValidated bool `json:"emailValidated"`
	// ValidationKey holds the value of the "validation_key" field.
	ValidationKey uuid.UUID `json:"-"`
	// ValidationSentAt holds the value of the "validation_sent_at" field.
	ValidationSentAt time.Time `json:"validationSentAt"`
	// Password holds the value of the "password" field.
	Password []byte `json:"-"`
	// PasswordResetKey holds the value of the "password_reset_key" field.
	PasswordResetKey uuid.UUID `json:"-"`
	// PasswordResetAt holds the value of the "password_reset_at" field.
	PasswordResetAt time.Time `json:"passwordResetAt"`
	// Active holds the value of the "active" field.
	Active bool `json:"active"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges           UserEdges `json:"edges"`
	user_role       *uuid.UUID
	user_created_by *uuid.UUID
	user_updated_by *uuid.UUID
	selectValues    sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Role holds the value of the role edge.
	Role *Role `json:"role,omitempty"`
	// ProjectAssignments holds the value of the projectAssignments edge.
	ProjectAssignments []*ProjectAssignment `json:"projectAssignments,omitempty"`
	// Images holds the value of the images edge.
	Images []*Image `json:"images,omitempty"`
	// Cameras holds the value of the cameras edge.
	Cameras []*Camera `json:"cameras,omitempty"`
	// ApiKey holds the value of the apiKey edge.
	ApiKey []*ApiKey `json:"apiKey,omitempty"`
	// CreatedUsers holds the value of the created_users edge.
	CreatedUsers []*User `json:"created_users,omitempty"`
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"createdBy"`
	// ModifiedUsers holds the value of the modified_users edge.
	ModifiedUsers []*User `json:"modified_users,omitempty"`
	// UpdatedBy holds the value of the updated_by edge.
	UpdatedBy *User `json:"updatedBy"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) RoleOrErr() (*Role, error) {
	if e.loadedTypes[0] {
		if e.Role == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: role.Label}
		}
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// ProjectAssignmentsOrErr returns the ProjectAssignments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ProjectAssignmentsOrErr() ([]*ProjectAssignment, error) {
	if e.loadedTypes[1] {
		return e.ProjectAssignments, nil
	}
	return nil, &NotLoadedError{edge: "projectAssignments"}
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ImagesOrErr() ([]*Image, error) {
	if e.loadedTypes[2] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// CamerasOrErr returns the Cameras value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CamerasOrErr() ([]*Camera, error) {
	if e.loadedTypes[3] {
		return e.Cameras, nil
	}
	return nil, &NotLoadedError{edge: "cameras"}
}

// ApiKeyOrErr returns the ApiKey value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ApiKeyOrErr() ([]*ApiKey, error) {
	if e.loadedTypes[4] {
		return e.ApiKey, nil
	}
	return nil, &NotLoadedError{edge: "apiKey"}
}

// CreatedUsersOrErr returns the CreatedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreatedUsersOrErr() ([]*User, error) {
	if e.loadedTypes[5] {
		return e.CreatedUsers, nil
	}
	return nil, &NotLoadedError{edge: "created_users"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) CreatedByOrErr() (*User, error) {
	if e.loadedTypes[6] {
		if e.CreatedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreatedBy, nil
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// ModifiedUsersOrErr returns the ModifiedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ModifiedUsersOrErr() ([]*User, error) {
	if e.loadedTypes[7] {
		return e.ModifiedUsers, nil
	}
	return nil, &NotLoadedError{edge: "modified_users"}
}

// UpdatedByOrErr returns the UpdatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) UpdatedByOrErr() (*User, error) {
	if e.loadedTypes[8] {
		if e.UpdatedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UpdatedBy, nil
	}
	return nil, &NotLoadedError{edge: "updated_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldPassword:
			values[i] = new([]byte)
		case user.FieldEmailValidated, user.FieldActive:
			values[i] = new(sql.NullBool)
		case user.FieldFirstName, user.FieldLastName, user.FieldEmail, user.FieldCopyrightTag:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldValidationSentAt, user.FieldPasswordResetAt:
			values[i] = new(sql.NullTime)
		case user.FieldID, user.FieldValidationKey, user.FieldPasswordResetKey:
			values[i] = new(uuid.UUID)
		case user.ForeignKeys[0]: // user_role
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case user.ForeignKeys[1]: // user_created_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case user.ForeignKeys[2]: // user_updated_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				u.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				u.LastName = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldCopyrightTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field copyright_tag", values[i])
			} else if value.Valid {
				u.CopyrightTag = value.String
			}
		case user.FieldEmailValidated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field email_validated", values[i])
			} else if value.Valid {
				u.EmailValidated = value.Bool
			}
		case user.FieldValidationKey:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field validation_key", values[i])
			} else if value != nil {
				u.ValidationKey = *value
			}
		case user.FieldValidationSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field validation_sent_at", values[i])
			} else if value.Valid {
				u.ValidationSentAt = value.Time
			}
		case user.FieldPassword:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value != nil {
				u.Password = *value
			}
		case user.FieldPasswordResetKey:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field password_reset_key", values[i])
			} else if value != nil {
				u.PasswordResetKey = *value
			}
		case user.FieldPasswordResetAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field password_reset_at", values[i])
			} else if value.Valid {
				u.PasswordResetAt = value.Time
			}
		case user.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				u.Active = value.Bool
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_role", values[i])
			} else if value.Valid {
				u.user_role = new(uuid.UUID)
				*u.user_role = *value.S.(*uuid.UUID)
			}
		case user.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_created_by", values[i])
			} else if value.Valid {
				u.user_created_by = new(uuid.UUID)
				*u.user_created_by = *value.S.(*uuid.UUID)
			}
		case user.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_updated_by", values[i])
			} else if value.Valid {
				u.user_updated_by = new(uuid.UUID)
				*u.user_updated_by = *value.S.(*uuid.UUID)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryRole queries the "role" edge of the User entity.
func (u *User) QueryRole() *RoleQuery {
	return NewUserClient(u.config).QueryRole(u)
}

// QueryProjectAssignments queries the "projectAssignments" edge of the User entity.
func (u *User) QueryProjectAssignments() *ProjectAssignmentQuery {
	return NewUserClient(u.config).QueryProjectAssignments(u)
}

// QueryImages queries the "images" edge of the User entity.
func (u *User) QueryImages() *ImageQuery {
	return NewUserClient(u.config).QueryImages(u)
}

// QueryCameras queries the "cameras" edge of the User entity.
func (u *User) QueryCameras() *CameraQuery {
	return NewUserClient(u.config).QueryCameras(u)
}

// QueryApiKey queries the "apiKey" edge of the User entity.
func (u *User) QueryApiKey() *ApiKeyQuery {
	return NewUserClient(u.config).QueryApiKey(u)
}

// QueryCreatedUsers queries the "created_users" edge of the User entity.
func (u *User) QueryCreatedUsers() *UserQuery {
	return NewUserClient(u.config).QueryCreatedUsers(u)
}

// QueryCreatedBy queries the "created_by" edge of the User entity.
func (u *User) QueryCreatedBy() *UserQuery {
	return NewUserClient(u.config).QueryCreatedBy(u)
}

// QueryModifiedUsers queries the "modified_users" edge of the User entity.
func (u *User) QueryModifiedUsers() *UserQuery {
	return NewUserClient(u.config).QueryModifiedUsers(u)
}

// QueryUpdatedBy queries the "updated_by" edge of the User entity.
func (u *User) QueryUpdatedBy() *UserQuery {
	return NewUserClient(u.config).QueryUpdatedBy(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(u.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(u.LastName)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("copyright_tag=")
	builder.WriteString(u.CopyrightTag)
	builder.WriteString(", ")
	builder.WriteString("email_validated=")
	builder.WriteString(fmt.Sprintf("%v", u.EmailValidated))
	builder.WriteString(", ")
	builder.WriteString("validation_key=")
	builder.WriteString(fmt.Sprintf("%v", u.ValidationKey))
	builder.WriteString(", ")
	builder.WriteString("validation_sent_at=")
	builder.WriteString(u.ValidationSentAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("password_reset_key=")
	builder.WriteString(fmt.Sprintf("%v", u.PasswordResetKey))
	builder.WriteString(", ")
	builder.WriteString("password_reset_at=")
	builder.WriteString(u.PasswordResetAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", u.Active))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
