// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/camera"
	"github.com/shutterbase/shutterbase/ent/timeoffset"
	"github.com/shutterbase/shutterbase/ent/user"
)

// TimeOffset is the model entity for the TimeOffset schema.
type TimeOffset struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// ServerTime holds the value of the "server_time" field.
	ServerTime time.Time `json:"serverTime"`
	// CameraTime holds the value of the "camera_time" field.
	CameraTime time.Time `json:"cameraTime"`
	// OffsetSeconds holds the value of the "offset_seconds" field.
	OffsetSeconds int `json:"offsetSeconds"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TimeOffsetQuery when eager-loading is set.
	Edges                  TimeOffsetEdges `json:"edges"`
	time_offset_camera     *uuid.UUID
	time_offset_created_by *uuid.UUID
	time_offset_updated_by *uuid.UUID
	selectValues           sql.SelectValues
}

// TimeOffsetEdges holds the relations/edges for other nodes in the graph.
type TimeOffsetEdges struct {
	// Camera holds the value of the camera edge.
	Camera *Camera `json:"camera"`
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"createdBy"`
	// UpdatedBy holds the value of the updated_by edge.
	UpdatedBy *User `json:"updatedBy"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CameraOrErr returns the Camera value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TimeOffsetEdges) CameraOrErr() (*Camera, error) {
	if e.loadedTypes[0] {
		if e.Camera == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: camera.Label}
		}
		return e.Camera, nil
	}
	return nil, &NotLoadedError{edge: "camera"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TimeOffsetEdges) CreatedByOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.CreatedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreatedBy, nil
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// UpdatedByOrErr returns the UpdatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TimeOffsetEdges) UpdatedByOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.UpdatedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UpdatedBy, nil
	}
	return nil, &NotLoadedError{edge: "updated_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TimeOffset) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case timeoffset.FieldOffsetSeconds:
			values[i] = new(sql.NullInt64)
		case timeoffset.FieldCreatedAt, timeoffset.FieldUpdatedAt, timeoffset.FieldServerTime, timeoffset.FieldCameraTime:
			values[i] = new(sql.NullTime)
		case timeoffset.FieldID:
			values[i] = new(uuid.UUID)
		case timeoffset.ForeignKeys[0]: // time_offset_camera
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case timeoffset.ForeignKeys[1]: // time_offset_created_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case timeoffset.ForeignKeys[2]: // time_offset_updated_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TimeOffset fields.
func (to *TimeOffset) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case timeoffset.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				to.ID = *value
			}
		case timeoffset.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				to.CreatedAt = value.Time
			}
		case timeoffset.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				to.UpdatedAt = value.Time
			}
		case timeoffset.FieldServerTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field server_time", values[i])
			} else if value.Valid {
				to.ServerTime = value.Time
			}
		case timeoffset.FieldCameraTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field camera_time", values[i])
			} else if value.Valid {
				to.CameraTime = value.Time
			}
		case timeoffset.FieldOffsetSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field offset_seconds", values[i])
			} else if value.Valid {
				to.OffsetSeconds = int(value.Int64)
			}
		case timeoffset.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field time_offset_camera", values[i])
			} else if value.Valid {
				to.time_offset_camera = new(uuid.UUID)
				*to.time_offset_camera = *value.S.(*uuid.UUID)
			}
		case timeoffset.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field time_offset_created_by", values[i])
			} else if value.Valid {
				to.time_offset_created_by = new(uuid.UUID)
				*to.time_offset_created_by = *value.S.(*uuid.UUID)
			}
		case timeoffset.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field time_offset_updated_by", values[i])
			} else if value.Valid {
				to.time_offset_updated_by = new(uuid.UUID)
				*to.time_offset_updated_by = *value.S.(*uuid.UUID)
			}
		default:
			to.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TimeOffset.
// This includes values selected through modifiers, order, etc.
func (to *TimeOffset) Value(name string) (ent.Value, error) {
	return to.selectValues.Get(name)
}

// QueryCamera queries the "camera" edge of the TimeOffset entity.
func (to *TimeOffset) QueryCamera() *CameraQuery {
	return NewTimeOffsetClient(to.config).QueryCamera(to)
}

// QueryCreatedBy queries the "created_by" edge of the TimeOffset entity.
func (to *TimeOffset) QueryCreatedBy() *UserQuery {
	return NewTimeOffsetClient(to.config).QueryCreatedBy(to)
}

// QueryUpdatedBy queries the "updated_by" edge of the TimeOffset entity.
func (to *TimeOffset) QueryUpdatedBy() *UserQuery {
	return NewTimeOffsetClient(to.config).QueryUpdatedBy(to)
}

// Update returns a builder for updating this TimeOffset.
// Note that you need to call TimeOffset.Unwrap() before calling this method if this TimeOffset
// was returned from a transaction, and the transaction was committed or rolled back.
func (to *TimeOffset) Update() *TimeOffsetUpdateOne {
	return NewTimeOffsetClient(to.config).UpdateOne(to)
}

// Unwrap unwraps the TimeOffset entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (to *TimeOffset) Unwrap() *TimeOffset {
	_tx, ok := to.config.driver.(*txDriver)
	if !ok {
		panic("ent: TimeOffset is not a transactional entity")
	}
	to.config.driver = _tx.drv
	return to
}

// String implements the fmt.Stringer.
func (to *TimeOffset) String() string {
	var builder strings.Builder
	builder.WriteString("TimeOffset(")
	builder.WriteString(fmt.Sprintf("id=%v, ", to.ID))
	builder.WriteString("created_at=")
	builder.WriteString(to.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(to.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("server_time=")
	builder.WriteString(to.ServerTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("camera_time=")
	builder.WriteString(to.CameraTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("offset_seconds=")
	builder.WriteString(fmt.Sprintf("%v", to.OffsetSeconds))
	builder.WriteByte(')')
	return builder.String()
}

// TimeOffsets is a parsable slice of TimeOffset.
type TimeOffsets []*TimeOffset
