// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/camera"
	"github.com/shutterbase/shutterbase/ent/image"
	"github.com/shutterbase/shutterbase/ent/timeoffset"
	"github.com/shutterbase/shutterbase/ent/user"
)

// CameraCreate is the builder for creating a Camera entity.
type CameraCreate struct {
	config
	mutation *CameraMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cc *CameraCreate) SetCreatedAt(t time.Time) *CameraCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CameraCreate) SetNillableCreatedAt(t *time.Time) *CameraCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CameraCreate) SetUpdatedAt(t time.Time) *CameraCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CameraCreate) SetNillableUpdatedAt(t *time.Time) *CameraCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CameraCreate) SetName(s string) *CameraCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *CameraCreate) SetDescription(s string) *CameraCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetID sets the "id" field.
func (cc *CameraCreate) SetID(u uuid.UUID) *CameraCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CameraCreate) SetNillableID(u *uuid.UUID) *CameraCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// AddTimeOffsetIDs adds the "timeOffsets" edge to the TimeOffset entity by IDs.
func (cc *CameraCreate) AddTimeOffsetIDs(ids ...uuid.UUID) *CameraCreate {
	cc.mutation.AddTimeOffsetIDs(ids...)
	return cc
}

// AddTimeOffsets adds the "timeOffsets" edges to the TimeOffset entity.
func (cc *CameraCreate) AddTimeOffsets(t ...*TimeOffset) *CameraCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddTimeOffsetIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (cc *CameraCreate) AddImageIDs(ids ...uuid.UUID) *CameraCreate {
	cc.mutation.AddImageIDs(ids...)
	return cc
}

// AddImages adds the "images" edges to the Image entity.
func (cc *CameraCreate) AddImages(i ...*Image) *CameraCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cc.AddImageIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cc *CameraCreate) SetOwnerID(id uuid.UUID) *CameraCreate {
	cc.mutation.SetOwnerID(id)
	return cc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cc *CameraCreate) SetNillableOwnerID(id *uuid.UUID) *CameraCreate {
	if id != nil {
		cc = cc.SetOwnerID(*id)
	}
	return cc
}

// SetOwner sets the "owner" edge to the User entity.
func (cc *CameraCreate) SetOwner(u *User) *CameraCreate {
	return cc.SetOwnerID(u.ID)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (cc *CameraCreate) SetCreatedByID(id uuid.UUID) *CameraCreate {
	cc.mutation.SetCreatedByID(id)
	return cc
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (cc *CameraCreate) SetNillableCreatedByID(id *uuid.UUID) *CameraCreate {
	if id != nil {
		cc = cc.SetCreatedByID(*id)
	}
	return cc
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (cc *CameraCreate) SetCreatedBy(u *User) *CameraCreate {
	return cc.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (cc *CameraCreate) SetUpdatedByID(id uuid.UUID) *CameraCreate {
	cc.mutation.SetUpdatedByID(id)
	return cc
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (cc *CameraCreate) SetNillableUpdatedByID(id *uuid.UUID) *CameraCreate {
	if id != nil {
		cc = cc.SetUpdatedByID(*id)
	}
	return cc
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (cc *CameraCreate) SetUpdatedBy(u *User) *CameraCreate {
	return cc.SetUpdatedByID(u.ID)
}

// Mutation returns the CameraMutation object of the builder.
func (cc *CameraCreate) Mutation() *CameraMutation {
	return cc.mutation
}

// Save creates the Camera in the database.
func (cc *CameraCreate) Save(ctx context.Context) (*Camera, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CameraCreate) SaveX(ctx context.Context) *Camera {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CameraCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CameraCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CameraCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := camera.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := camera.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := camera.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CameraCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Camera.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Camera.updated_at"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Camera.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := camera.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Camera.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Camera.description"`)}
	}
	if v, ok := cc.mutation.Description(); ok {
		if err := camera.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Camera.description": %w`, err)}
		}
	}
	return nil
}

func (cc *CameraCreate) sqlSave(ctx context.Context) (*Camera, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CameraCreate) createSpec() (*Camera, *sqlgraph.CreateSpec) {
	var (
		_node = &Camera{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(camera.Table, sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(camera.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(camera.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(camera.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(camera.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := cc.mutation.TimeOffsetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   camera.TimeOffsetsTable,
			Columns: []string{camera.TimeOffsetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timeoffset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   camera.ImagesTable,
			Columns: []string{camera.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   camera.OwnerTable,
			Columns: []string{camera.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.camera_owner = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   camera.CreatedByTable,
			Columns: []string{camera.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.camera_created_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   camera.UpdatedByTable,
			Columns: []string{camera.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.camera_updated_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CameraCreateBulk is the builder for creating many Camera entities in bulk.
type CameraCreateBulk struct {
	config
	builders []*CameraCreate
}

// Save creates the Camera entities in the database.
func (ccb *CameraCreateBulk) Save(ctx context.Context) ([]*Camera, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Camera, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CameraMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CameraCreateBulk) SaveX(ctx context.Context) []*Camera {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CameraCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CameraCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
