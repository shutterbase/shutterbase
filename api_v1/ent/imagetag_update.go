// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/imagetag"
	"github.com/shutterbase/shutterbase/ent/imagetagassignment"
	"github.com/shutterbase/shutterbase/ent/predicate"
	"github.com/shutterbase/shutterbase/ent/project"
	"github.com/shutterbase/shutterbase/ent/user"
)

// ImageTagUpdate is the builder for updating ImageTag entities.
type ImageTagUpdate struct {
	config
	hooks    []Hook
	mutation *ImageTagMutation
}

// Where appends a list predicates to the ImageTagUpdate builder.
func (itu *ImageTagUpdate) Where(ps ...predicate.ImageTag) *ImageTagUpdate {
	itu.mutation.Where(ps...)
	return itu
}

// SetUpdatedAt sets the "updated_at" field.
func (itu *ImageTagUpdate) SetUpdatedAt(t time.Time) *ImageTagUpdate {
	itu.mutation.SetUpdatedAt(t)
	return itu
}

// SetDescription sets the "description" field.
func (itu *ImageTagUpdate) SetDescription(s string) *ImageTagUpdate {
	itu.mutation.SetDescription(s)
	return itu
}

// SetIsAlbum sets the "is_album" field.
func (itu *ImageTagUpdate) SetIsAlbum(b bool) *ImageTagUpdate {
	itu.mutation.SetIsAlbum(b)
	return itu
}

// SetNillableIsAlbum sets the "is_album" field if the given value is not nil.
func (itu *ImageTagUpdate) SetNillableIsAlbum(b *bool) *ImageTagUpdate {
	if b != nil {
		itu.SetIsAlbum(*b)
	}
	return itu
}

// SetType sets the "type" field.
func (itu *ImageTagUpdate) SetType(i imagetag.Type) *ImageTagUpdate {
	itu.mutation.SetType(i)
	return itu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (itu *ImageTagUpdate) SetNillableType(i *imagetag.Type) *ImageTagUpdate {
	if i != nil {
		itu.SetType(*i)
	}
	return itu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (itu *ImageTagUpdate) SetProjectID(id uuid.UUID) *ImageTagUpdate {
	itu.mutation.SetProjectID(id)
	return itu
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (itu *ImageTagUpdate) SetNillableProjectID(id *uuid.UUID) *ImageTagUpdate {
	if id != nil {
		itu = itu.SetProjectID(*id)
	}
	return itu
}

// SetProject sets the "project" edge to the Project entity.
func (itu *ImageTagUpdate) SetProject(p *Project) *ImageTagUpdate {
	return itu.SetProjectID(p.ID)
}

// AddImageTagAssignmentIDs adds the "image_tag_assignments" edge to the ImageTagAssignment entity by IDs.
func (itu *ImageTagUpdate) AddImageTagAssignmentIDs(ids ...uuid.UUID) *ImageTagUpdate {
	itu.mutation.AddImageTagAssignmentIDs(ids...)
	return itu
}

// AddImageTagAssignments adds the "image_tag_assignments" edges to the ImageTagAssignment entity.
func (itu *ImageTagUpdate) AddImageTagAssignments(i ...*ImageTagAssignment) *ImageTagUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return itu.AddImageTagAssignmentIDs(ids...)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (itu *ImageTagUpdate) SetCreatedByID(id uuid.UUID) *ImageTagUpdate {
	itu.mutation.SetCreatedByID(id)
	return itu
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (itu *ImageTagUpdate) SetNillableCreatedByID(id *uuid.UUID) *ImageTagUpdate {
	if id != nil {
		itu = itu.SetCreatedByID(*id)
	}
	return itu
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (itu *ImageTagUpdate) SetCreatedBy(u *User) *ImageTagUpdate {
	return itu.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (itu *ImageTagUpdate) SetUpdatedByID(id uuid.UUID) *ImageTagUpdate {
	itu.mutation.SetUpdatedByID(id)
	return itu
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (itu *ImageTagUpdate) SetNillableUpdatedByID(id *uuid.UUID) *ImageTagUpdate {
	if id != nil {
		itu = itu.SetUpdatedByID(*id)
	}
	return itu
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (itu *ImageTagUpdate) SetUpdatedBy(u *User) *ImageTagUpdate {
	return itu.SetUpdatedByID(u.ID)
}

// Mutation returns the ImageTagMutation object of the builder.
func (itu *ImageTagUpdate) Mutation() *ImageTagMutation {
	return itu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (itu *ImageTagUpdate) ClearProject() *ImageTagUpdate {
	itu.mutation.ClearProject()
	return itu
}

// ClearImageTagAssignments clears all "image_tag_assignments" edges to the ImageTagAssignment entity.
func (itu *ImageTagUpdate) ClearImageTagAssignments() *ImageTagUpdate {
	itu.mutation.ClearImageTagAssignments()
	return itu
}

// RemoveImageTagAssignmentIDs removes the "image_tag_assignments" edge to ImageTagAssignment entities by IDs.
func (itu *ImageTagUpdate) RemoveImageTagAssignmentIDs(ids ...uuid.UUID) *ImageTagUpdate {
	itu.mutation.RemoveImageTagAssignmentIDs(ids...)
	return itu
}

// RemoveImageTagAssignments removes "image_tag_assignments" edges to ImageTagAssignment entities.
func (itu *ImageTagUpdate) RemoveImageTagAssignments(i ...*ImageTagAssignment) *ImageTagUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return itu.RemoveImageTagAssignmentIDs(ids...)
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (itu *ImageTagUpdate) ClearCreatedBy() *ImageTagUpdate {
	itu.mutation.ClearCreatedBy()
	return itu
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (itu *ImageTagUpdate) ClearUpdatedBy() *ImageTagUpdate {
	itu.mutation.ClearUpdatedBy()
	return itu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (itu *ImageTagUpdate) Save(ctx context.Context) (int, error) {
	itu.defaults()
	return withHooks(ctx, itu.sqlSave, itu.mutation, itu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (itu *ImageTagUpdate) SaveX(ctx context.Context) int {
	affected, err := itu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (itu *ImageTagUpdate) Exec(ctx context.Context) error {
	_, err := itu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itu *ImageTagUpdate) ExecX(ctx context.Context) {
	if err := itu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (itu *ImageTagUpdate) defaults() {
	if _, ok := itu.mutation.UpdatedAt(); !ok {
		v := imagetag.UpdateDefaultUpdatedAt()
		itu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itu *ImageTagUpdate) check() error {
	if v, ok := itu.mutation.Description(); ok {
		if err := imagetag.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "ImageTag.description": %w`, err)}
		}
	}
	if v, ok := itu.mutation.GetType(); ok {
		if err := imagetag.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ImageTag.type": %w`, err)}
		}
	}
	return nil
}

func (itu *ImageTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := itu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(imagetag.Table, imagetag.Columns, sqlgraph.NewFieldSpec(imagetag.FieldID, field.TypeUUID))
	if ps := itu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := itu.mutation.UpdatedAt(); ok {
		_spec.SetField(imagetag.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := itu.mutation.Description(); ok {
		_spec.SetField(imagetag.FieldDescription, field.TypeString, value)
	}
	if value, ok := itu.mutation.IsAlbum(); ok {
		_spec.SetField(imagetag.FieldIsAlbum, field.TypeBool, value)
	}
	if value, ok := itu.mutation.GetType(); ok {
		_spec.SetField(imagetag.FieldType, field.TypeEnum, value)
	}
	if itu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetag.ProjectTable,
			Columns: []string{imagetag.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetag.ProjectTable,
			Columns: []string{imagetag.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if itu.mutation.ImageTagAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imagetag.ImageTagAssignmentsTable,
			Columns: []string{imagetag.ImageTagAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagetagassignment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.RemovedImageTagAssignmentsIDs(); len(nodes) > 0 && !itu.mutation.ImageTagAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imagetag.ImageTagAssignmentsTable,
			Columns: []string{imagetag.ImageTagAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagetagassignment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.ImageTagAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imagetag.ImageTagAssignmentsTable,
			Columns: []string{imagetag.ImageTagAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagetagassignment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if itu.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetag.CreatedByTable,
			Columns: []string{imagetag.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetag.CreatedByTable,
			Columns: []string{imagetag.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if itu.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetag.UpdatedByTable,
			Columns: []string{imagetag.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetag.UpdatedByTable,
			Columns: []string{imagetag.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, itu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagetag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	itu.mutation.done = true
	return n, nil
}

// ImageTagUpdateOne is the builder for updating a single ImageTag entity.
type ImageTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageTagMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ituo *ImageTagUpdateOne) SetUpdatedAt(t time.Time) *ImageTagUpdateOne {
	ituo.mutation.SetUpdatedAt(t)
	return ituo
}

// SetDescription sets the "description" field.
func (ituo *ImageTagUpdateOne) SetDescription(s string) *ImageTagUpdateOne {
	ituo.mutation.SetDescription(s)
	return ituo
}

// SetIsAlbum sets the "is_album" field.
func (ituo *ImageTagUpdateOne) SetIsAlbum(b bool) *ImageTagUpdateOne {
	ituo.mutation.SetIsAlbum(b)
	return ituo
}

// SetNillableIsAlbum sets the "is_album" field if the given value is not nil.
func (ituo *ImageTagUpdateOne) SetNillableIsAlbum(b *bool) *ImageTagUpdateOne {
	if b != nil {
		ituo.SetIsAlbum(*b)
	}
	return ituo
}

// SetType sets the "type" field.
func (ituo *ImageTagUpdateOne) SetType(i imagetag.Type) *ImageTagUpdateOne {
	ituo.mutation.SetType(i)
	return ituo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ituo *ImageTagUpdateOne) SetNillableType(i *imagetag.Type) *ImageTagUpdateOne {
	if i != nil {
		ituo.SetType(*i)
	}
	return ituo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (ituo *ImageTagUpdateOne) SetProjectID(id uuid.UUID) *ImageTagUpdateOne {
	ituo.mutation.SetProjectID(id)
	return ituo
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (ituo *ImageTagUpdateOne) SetNillableProjectID(id *uuid.UUID) *ImageTagUpdateOne {
	if id != nil {
		ituo = ituo.SetProjectID(*id)
	}
	return ituo
}

// SetProject sets the "project" edge to the Project entity.
func (ituo *ImageTagUpdateOne) SetProject(p *Project) *ImageTagUpdateOne {
	return ituo.SetProjectID(p.ID)
}

// AddImageTagAssignmentIDs adds the "image_tag_assignments" edge to the ImageTagAssignment entity by IDs.
func (ituo *ImageTagUpdateOne) AddImageTagAssignmentIDs(ids ...uuid.UUID) *ImageTagUpdateOne {
	ituo.mutation.AddImageTagAssignmentIDs(ids...)
	return ituo
}

// AddImageTagAssignments adds the "image_tag_assignments" edges to the ImageTagAssignment entity.
func (ituo *ImageTagUpdateOne) AddImageTagAssignments(i ...*ImageTagAssignment) *ImageTagUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ituo.AddImageTagAssignmentIDs(ids...)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (ituo *ImageTagUpdateOne) SetCreatedByID(id uuid.UUID) *ImageTagUpdateOne {
	ituo.mutation.SetCreatedByID(id)
	return ituo
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (ituo *ImageTagUpdateOne) SetNillableCreatedByID(id *uuid.UUID) *ImageTagUpdateOne {
	if id != nil {
		ituo = ituo.SetCreatedByID(*id)
	}
	return ituo
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (ituo *ImageTagUpdateOne) SetCreatedBy(u *User) *ImageTagUpdateOne {
	return ituo.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (ituo *ImageTagUpdateOne) SetUpdatedByID(id uuid.UUID) *ImageTagUpdateOne {
	ituo.mutation.SetUpdatedByID(id)
	return ituo
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (ituo *ImageTagUpdateOne) SetNillableUpdatedByID(id *uuid.UUID) *ImageTagUpdateOne {
	if id != nil {
		ituo = ituo.SetUpdatedByID(*id)
	}
	return ituo
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (ituo *ImageTagUpdateOne) SetUpdatedBy(u *User) *ImageTagUpdateOne {
	return ituo.SetUpdatedByID(u.ID)
}

// Mutation returns the ImageTagMutation object of the builder.
func (ituo *ImageTagUpdateOne) Mutation() *ImageTagMutation {
	return ituo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (ituo *ImageTagUpdateOne) ClearProject() *ImageTagUpdateOne {
	ituo.mutation.ClearProject()
	return ituo
}

// ClearImageTagAssignments clears all "image_tag_assignments" edges to the ImageTagAssignment entity.
func (ituo *ImageTagUpdateOne) ClearImageTagAssignments() *ImageTagUpdateOne {
	ituo.mutation.ClearImageTagAssignments()
	return ituo
}

// RemoveImageTagAssignmentIDs removes the "image_tag_assignments" edge to ImageTagAssignment entities by IDs.
func (ituo *ImageTagUpdateOne) RemoveImageTagAssignmentIDs(ids ...uuid.UUID) *ImageTagUpdateOne {
	ituo.mutation.RemoveImageTagAssignmentIDs(ids...)
	return ituo
}

// RemoveImageTagAssignments removes "image_tag_assignments" edges to ImageTagAssignment entities.
func (ituo *ImageTagUpdateOne) RemoveImageTagAssignments(i ...*ImageTagAssignment) *ImageTagUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ituo.RemoveImageTagAssignmentIDs(ids...)
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (ituo *ImageTagUpdateOne) ClearCreatedBy() *ImageTagUpdateOne {
	ituo.mutation.ClearCreatedBy()
	return ituo
}

// ClearUpdatedBy clears the "updated_by" edge to the User entity.
func (ituo *ImageTagUpdateOne) ClearUpdatedBy() *ImageTagUpdateOne {
	ituo.mutation.ClearUpdatedBy()
	return ituo
}

// Where appends a list predicates to the ImageTagUpdate builder.
func (ituo *ImageTagUpdateOne) Where(ps ...predicate.ImageTag) *ImageTagUpdateOne {
	ituo.mutation.Where(ps...)
	return ituo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ituo *ImageTagUpdateOne) Select(field string, fields ...string) *ImageTagUpdateOne {
	ituo.fields = append([]string{field}, fields...)
	return ituo
}

// Save executes the query and returns the updated ImageTag entity.
func (ituo *ImageTagUpdateOne) Save(ctx context.Context) (*ImageTag, error) {
	ituo.defaults()
	return withHooks(ctx, ituo.sqlSave, ituo.mutation, ituo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ituo *ImageTagUpdateOne) SaveX(ctx context.Context) *ImageTag {
	node, err := ituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ituo *ImageTagUpdateOne) Exec(ctx context.Context) error {
	_, err := ituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ituo *ImageTagUpdateOne) ExecX(ctx context.Context) {
	if err := ituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ituo *ImageTagUpdateOne) defaults() {
	if _, ok := ituo.mutation.UpdatedAt(); !ok {
		v := imagetag.UpdateDefaultUpdatedAt()
		ituo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ituo *ImageTagUpdateOne) check() error {
	if v, ok := ituo.mutation.Description(); ok {
		if err := imagetag.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "ImageTag.description": %w`, err)}
		}
	}
	if v, ok := ituo.mutation.GetType(); ok {
		if err := imagetag.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "ImageTag.type": %w`, err)}
		}
	}
	return nil
}

func (ituo *ImageTagUpdateOne) sqlSave(ctx context.Context) (_node *ImageTag, err error) {
	if err := ituo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(imagetag.Table, imagetag.Columns, sqlgraph.NewFieldSpec(imagetag.FieldID, field.TypeUUID))
	id, ok := ituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ImageTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imagetag.FieldID)
		for _, f := range fields {
			if !imagetag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != imagetag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ituo.mutation.UpdatedAt(); ok {
		_spec.SetField(imagetag.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ituo.mutation.Description(); ok {
		_spec.SetField(imagetag.FieldDescription, field.TypeString, value)
	}
	if value, ok := ituo.mutation.IsAlbum(); ok {
		_spec.SetField(imagetag.FieldIsAlbum, field.TypeBool, value)
	}
	if value, ok := ituo.mutation.GetType(); ok {
		_spec.SetField(imagetag.FieldType, field.TypeEnum, value)
	}
	if ituo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetag.ProjectTable,
			Columns: []string{imagetag.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetag.ProjectTable,
			Columns: []string{imagetag.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ituo.mutation.ImageTagAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imagetag.ImageTagAssignmentsTable,
			Columns: []string{imagetag.ImageTagAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagetagassignment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.RemovedImageTagAssignmentsIDs(); len(nodes) > 0 && !ituo.mutation.ImageTagAssignmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imagetag.ImageTagAssignmentsTable,
			Columns: []string{imagetag.ImageTagAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagetagassignment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.ImageTagAssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   imagetag.ImageTagAssignmentsTable,
			Columns: []string{imagetag.ImageTagAssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagetagassignment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ituo.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetag.CreatedByTable,
			Columns: []string{imagetag.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetag.CreatedByTable,
			Columns: []string{imagetag.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ituo.mutation.UpdatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetag.UpdatedByTable,
			Columns: []string{imagetag.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   imagetag.UpdatedByTable,
			Columns: []string{imagetag.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ImageTag{config: ituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagetag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ituo.mutation.done = true
	return _node, nil
}
