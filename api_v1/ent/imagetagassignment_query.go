// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/image"
	"github.com/shutterbase/shutterbase/ent/imagetag"
	"github.com/shutterbase/shutterbase/ent/imagetagassignment"
	"github.com/shutterbase/shutterbase/ent/predicate"
	"github.com/shutterbase/shutterbase/ent/user"
)

// ImageTagAssignmentQuery is the builder for querying ImageTagAssignment entities.
type ImageTagAssignmentQuery struct {
	config
	ctx           *QueryContext
	order         []imagetagassignment.OrderOption
	inters        []Interceptor
	predicates    []predicate.ImageTagAssignment
	withImage     *ImageQuery
	withImageTag  *ImageTagQuery
	withCreatedBy *UserQuery
	withUpdatedBy *UserQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ImageTagAssignmentQuery builder.
func (itaq *ImageTagAssignmentQuery) Where(ps ...predicate.ImageTagAssignment) *ImageTagAssignmentQuery {
	itaq.predicates = append(itaq.predicates, ps...)
	return itaq
}

// Limit the number of records to be returned by this query.
func (itaq *ImageTagAssignmentQuery) Limit(limit int) *ImageTagAssignmentQuery {
	itaq.ctx.Limit = &limit
	return itaq
}

// Offset to start from.
func (itaq *ImageTagAssignmentQuery) Offset(offset int) *ImageTagAssignmentQuery {
	itaq.ctx.Offset = &offset
	return itaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (itaq *ImageTagAssignmentQuery) Unique(unique bool) *ImageTagAssignmentQuery {
	itaq.ctx.Unique = &unique
	return itaq
}

// Order specifies how the records should be ordered.
func (itaq *ImageTagAssignmentQuery) Order(o ...imagetagassignment.OrderOption) *ImageTagAssignmentQuery {
	itaq.order = append(itaq.order, o...)
	return itaq
}

// QueryImage chains the current query on the "image" edge.
func (itaq *ImageTagAssignmentQuery) QueryImage() *ImageQuery {
	query := (&ImageClient{config: itaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := itaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := itaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(imagetagassignment.Table, imagetagassignment.FieldID, selector),
			sqlgraph.To(image.Table, image.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, imagetagassignment.ImageTable, imagetagassignment.ImageColumn),
		)
		fromU = sqlgraph.SetNeighbors(itaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryImageTag chains the current query on the "image_tag" edge.
func (itaq *ImageTagAssignmentQuery) QueryImageTag() *ImageTagQuery {
	query := (&ImageTagClient{config: itaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := itaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := itaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(imagetagassignment.Table, imagetagassignment.FieldID, selector),
			sqlgraph.To(imagetag.Table, imagetag.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, imagetagassignment.ImageTagTable, imagetagassignment.ImageTagColumn),
		)
		fromU = sqlgraph.SetNeighbors(itaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedBy chains the current query on the "created_by" edge.
func (itaq *ImageTagAssignmentQuery) QueryCreatedBy() *UserQuery {
	query := (&UserClient{config: itaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := itaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := itaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(imagetagassignment.Table, imagetagassignment.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, imagetagassignment.CreatedByTable, imagetagassignment.CreatedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(itaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdatedBy chains the current query on the "updated_by" edge.
func (itaq *ImageTagAssignmentQuery) QueryUpdatedBy() *UserQuery {
	query := (&UserClient{config: itaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := itaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := itaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(imagetagassignment.Table, imagetagassignment.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, imagetagassignment.UpdatedByTable, imagetagassignment.UpdatedByColumn),
		)
		fromU = sqlgraph.SetNeighbors(itaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ImageTagAssignment entity from the query.
// Returns a *NotFoundError when no ImageTagAssignment was found.
func (itaq *ImageTagAssignmentQuery) First(ctx context.Context) (*ImageTagAssignment, error) {
	nodes, err := itaq.Limit(1).All(setContextOp(ctx, itaq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{imagetagassignment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (itaq *ImageTagAssignmentQuery) FirstX(ctx context.Context) *ImageTagAssignment {
	node, err := itaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ImageTagAssignment ID from the query.
// Returns a *NotFoundError when no ImageTagAssignment ID was found.
func (itaq *ImageTagAssignmentQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = itaq.Limit(1).IDs(setContextOp(ctx, itaq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{imagetagassignment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (itaq *ImageTagAssignmentQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := itaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ImageTagAssignment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ImageTagAssignment entity is found.
// Returns a *NotFoundError when no ImageTagAssignment entities are found.
func (itaq *ImageTagAssignmentQuery) Only(ctx context.Context) (*ImageTagAssignment, error) {
	nodes, err := itaq.Limit(2).All(setContextOp(ctx, itaq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{imagetagassignment.Label}
	default:
		return nil, &NotSingularError{imagetagassignment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (itaq *ImageTagAssignmentQuery) OnlyX(ctx context.Context) *ImageTagAssignment {
	node, err := itaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ImageTagAssignment ID in the query.
// Returns a *NotSingularError when more than one ImageTagAssignment ID is found.
// Returns a *NotFoundError when no entities are found.
func (itaq *ImageTagAssignmentQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = itaq.Limit(2).IDs(setContextOp(ctx, itaq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{imagetagassignment.Label}
	default:
		err = &NotSingularError{imagetagassignment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (itaq *ImageTagAssignmentQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := itaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ImageTagAssignments.
func (itaq *ImageTagAssignmentQuery) All(ctx context.Context) ([]*ImageTagAssignment, error) {
	ctx = setContextOp(ctx, itaq.ctx, "All")
	if err := itaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ImageTagAssignment, *ImageTagAssignmentQuery]()
	return withInterceptors[[]*ImageTagAssignment](ctx, itaq, qr, itaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (itaq *ImageTagAssignmentQuery) AllX(ctx context.Context) []*ImageTagAssignment {
	nodes, err := itaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ImageTagAssignment IDs.
func (itaq *ImageTagAssignmentQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if itaq.ctx.Unique == nil && itaq.path != nil {
		itaq.Unique(true)
	}
	ctx = setContextOp(ctx, itaq.ctx, "IDs")
	if err = itaq.Select(imagetagassignment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (itaq *ImageTagAssignmentQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := itaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (itaq *ImageTagAssignmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, itaq.ctx, "Count")
	if err := itaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, itaq, querierCount[*ImageTagAssignmentQuery](), itaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (itaq *ImageTagAssignmentQuery) CountX(ctx context.Context) int {
	count, err := itaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (itaq *ImageTagAssignmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, itaq.ctx, "Exist")
	switch _, err := itaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (itaq *ImageTagAssignmentQuery) ExistX(ctx context.Context) bool {
	exist, err := itaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ImageTagAssignmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (itaq *ImageTagAssignmentQuery) Clone() *ImageTagAssignmentQuery {
	if itaq == nil {
		return nil
	}
	return &ImageTagAssignmentQuery{
		config:        itaq.config,
		ctx:           itaq.ctx.Clone(),
		order:         append([]imagetagassignment.OrderOption{}, itaq.order...),
		inters:        append([]Interceptor{}, itaq.inters...),
		predicates:    append([]predicate.ImageTagAssignment{}, itaq.predicates...),
		withImage:     itaq.withImage.Clone(),
		withImageTag:  itaq.withImageTag.Clone(),
		withCreatedBy: itaq.withCreatedBy.Clone(),
		withUpdatedBy: itaq.withUpdatedBy.Clone(),
		// clone intermediate query.
		sql:  itaq.sql.Clone(),
		path: itaq.path,
	}
}

// WithImage tells the query-builder to eager-load the nodes that are connected to
// the "image" edge. The optional arguments are used to configure the query builder of the edge.
func (itaq *ImageTagAssignmentQuery) WithImage(opts ...func(*ImageQuery)) *ImageTagAssignmentQuery {
	query := (&ImageClient{config: itaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	itaq.withImage = query
	return itaq
}

// WithImageTag tells the query-builder to eager-load the nodes that are connected to
// the "image_tag" edge. The optional arguments are used to configure the query builder of the edge.
func (itaq *ImageTagAssignmentQuery) WithImageTag(opts ...func(*ImageTagQuery)) *ImageTagAssignmentQuery {
	query := (&ImageTagClient{config: itaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	itaq.withImageTag = query
	return itaq
}

// WithCreatedBy tells the query-builder to eager-load the nodes that are connected to
// the "created_by" edge. The optional arguments are used to configure the query builder of the edge.
func (itaq *ImageTagAssignmentQuery) WithCreatedBy(opts ...func(*UserQuery)) *ImageTagAssignmentQuery {
	query := (&UserClient{config: itaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	itaq.withCreatedBy = query
	return itaq
}

// WithUpdatedBy tells the query-builder to eager-load the nodes that are connected to
// the "updated_by" edge. The optional arguments are used to configure the query builder of the edge.
func (itaq *ImageTagAssignmentQuery) WithUpdatedBy(opts ...func(*UserQuery)) *ImageTagAssignmentQuery {
	query := (&UserClient{config: itaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	itaq.withUpdatedBy = query
	return itaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ImageTagAssignment.Query().
//		GroupBy(imagetagassignment.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (itaq *ImageTagAssignmentQuery) GroupBy(field string, fields ...string) *ImageTagAssignmentGroupBy {
	itaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ImageTagAssignmentGroupBy{build: itaq}
	grbuild.flds = &itaq.ctx.Fields
	grbuild.label = imagetagassignment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"createdAt"`
//	}
//
//	client.ImageTagAssignment.Query().
//		Select(imagetagassignment.FieldCreatedAt).
//		Scan(ctx, &v)
func (itaq *ImageTagAssignmentQuery) Select(fields ...string) *ImageTagAssignmentSelect {
	itaq.ctx.Fields = append(itaq.ctx.Fields, fields...)
	sbuild := &ImageTagAssignmentSelect{ImageTagAssignmentQuery: itaq}
	sbuild.label = imagetagassignment.Label
	sbuild.flds, sbuild.scan = &itaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ImageTagAssignmentSelect configured with the given aggregations.
func (itaq *ImageTagAssignmentQuery) Aggregate(fns ...AggregateFunc) *ImageTagAssignmentSelect {
	return itaq.Select().Aggregate(fns...)
}

func (itaq *ImageTagAssignmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range itaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, itaq); err != nil {
				return err
			}
		}
	}
	for _, f := range itaq.ctx.Fields {
		if !imagetagassignment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if itaq.path != nil {
		prev, err := itaq.path(ctx)
		if err != nil {
			return err
		}
		itaq.sql = prev
	}
	return nil
}

func (itaq *ImageTagAssignmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ImageTagAssignment, error) {
	var (
		nodes       = []*ImageTagAssignment{}
		withFKs     = itaq.withFKs
		_spec       = itaq.querySpec()
		loadedTypes = [4]bool{
			itaq.withImage != nil,
			itaq.withImageTag != nil,
			itaq.withCreatedBy != nil,
			itaq.withUpdatedBy != nil,
		}
	)
	if itaq.withImage != nil || itaq.withImageTag != nil || itaq.withCreatedBy != nil || itaq.withUpdatedBy != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, imagetagassignment.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ImageTagAssignment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ImageTagAssignment{config: itaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, itaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := itaq.withImage; query != nil {
		if err := itaq.loadImage(ctx, query, nodes, nil,
			func(n *ImageTagAssignment, e *Image) { n.Edges.Image = e }); err != nil {
			return nil, err
		}
	}
	if query := itaq.withImageTag; query != nil {
		if err := itaq.loadImageTag(ctx, query, nodes, nil,
			func(n *ImageTagAssignment, e *ImageTag) { n.Edges.ImageTag = e }); err != nil {
			return nil, err
		}
	}
	if query := itaq.withCreatedBy; query != nil {
		if err := itaq.loadCreatedBy(ctx, query, nodes, nil,
			func(n *ImageTagAssignment, e *User) { n.Edges.CreatedBy = e }); err != nil {
			return nil, err
		}
	}
	if query := itaq.withUpdatedBy; query != nil {
		if err := itaq.loadUpdatedBy(ctx, query, nodes, nil,
			func(n *ImageTagAssignment, e *User) { n.Edges.UpdatedBy = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (itaq *ImageTagAssignmentQuery) loadImage(ctx context.Context, query *ImageQuery, nodes []*ImageTagAssignment, init func(*ImageTagAssignment), assign func(*ImageTagAssignment, *Image)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ImageTagAssignment)
	for i := range nodes {
		if nodes[i].image_tag_assignment_image == nil {
			continue
		}
		fk := *nodes[i].image_tag_assignment_image
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(image.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "image_tag_assignment_image" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (itaq *ImageTagAssignmentQuery) loadImageTag(ctx context.Context, query *ImageTagQuery, nodes []*ImageTagAssignment, init func(*ImageTagAssignment), assign func(*ImageTagAssignment, *ImageTag)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ImageTagAssignment)
	for i := range nodes {
		if nodes[i].image_tag_assignment_image_tag == nil {
			continue
		}
		fk := *nodes[i].image_tag_assignment_image_tag
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(imagetag.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "image_tag_assignment_image_tag" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (itaq *ImageTagAssignmentQuery) loadCreatedBy(ctx context.Context, query *UserQuery, nodes []*ImageTagAssignment, init func(*ImageTagAssignment), assign func(*ImageTagAssignment, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ImageTagAssignment)
	for i := range nodes {
		if nodes[i].image_tag_assignment_created_by == nil {
			continue
		}
		fk := *nodes[i].image_tag_assignment_created_by
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "image_tag_assignment_created_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (itaq *ImageTagAssignmentQuery) loadUpdatedBy(ctx context.Context, query *UserQuery, nodes []*ImageTagAssignment, init func(*ImageTagAssignment), assign func(*ImageTagAssignment, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ImageTagAssignment)
	for i := range nodes {
		if nodes[i].image_tag_assignment_updated_by == nil {
			continue
		}
		fk := *nodes[i].image_tag_assignment_updated_by
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "image_tag_assignment_updated_by" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (itaq *ImageTagAssignmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := itaq.querySpec()
	_spec.Node.Columns = itaq.ctx.Fields
	if len(itaq.ctx.Fields) > 0 {
		_spec.Unique = itaq.ctx.Unique != nil && *itaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, itaq.driver, _spec)
}

func (itaq *ImageTagAssignmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(imagetagassignment.Table, imagetagassignment.Columns, sqlgraph.NewFieldSpec(imagetagassignment.FieldID, field.TypeUUID))
	_spec.From = itaq.sql
	if unique := itaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if itaq.path != nil {
		_spec.Unique = true
	}
	if fields := itaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, imagetagassignment.FieldID)
		for i := range fields {
			if fields[i] != imagetagassignment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := itaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := itaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := itaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := itaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (itaq *ImageTagAssignmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(itaq.driver.Dialect())
	t1 := builder.Table(imagetagassignment.Table)
	columns := itaq.ctx.Fields
	if len(columns) == 0 {
		columns = imagetagassignment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if itaq.sql != nil {
		selector = itaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if itaq.ctx.Unique != nil && *itaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range itaq.predicates {
		p(selector)
	}
	for _, p := range itaq.order {
		p(selector)
	}
	if offset := itaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := itaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ImageTagAssignmentGroupBy is the group-by builder for ImageTagAssignment entities.
type ImageTagAssignmentGroupBy struct {
	selector
	build *ImageTagAssignmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (itagb *ImageTagAssignmentGroupBy) Aggregate(fns ...AggregateFunc) *ImageTagAssignmentGroupBy {
	itagb.fns = append(itagb.fns, fns...)
	return itagb
}

// Scan applies the selector query and scans the result into the given value.
func (itagb *ImageTagAssignmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, itagb.build.ctx, "GroupBy")
	if err := itagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ImageTagAssignmentQuery, *ImageTagAssignmentGroupBy](ctx, itagb.build, itagb, itagb.build.inters, v)
}

func (itagb *ImageTagAssignmentGroupBy) sqlScan(ctx context.Context, root *ImageTagAssignmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(itagb.fns))
	for _, fn := range itagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*itagb.flds)+len(itagb.fns))
		for _, f := range *itagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*itagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := itagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ImageTagAssignmentSelect is the builder for selecting fields of ImageTagAssignment entities.
type ImageTagAssignmentSelect struct {
	*ImageTagAssignmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (itas *ImageTagAssignmentSelect) Aggregate(fns ...AggregateFunc) *ImageTagAssignmentSelect {
	itas.fns = append(itas.fns, fns...)
	return itas
}

// Scan applies the selector query and scans the result into the given value.
func (itas *ImageTagAssignmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, itas.ctx, "Select")
	if err := itas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ImageTagAssignmentQuery, *ImageTagAssignmentSelect](ctx, itas.ImageTagAssignmentQuery, itas, itas.inters, v)
}

func (itas *ImageTagAssignmentSelect) sqlScan(ctx context.Context, root *ImageTagAssignmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(itas.fns))
	for _, fn := range itas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*itas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := itas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
