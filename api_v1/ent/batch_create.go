// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/batch"
	"github.com/shutterbase/shutterbase/ent/image"
	"github.com/shutterbase/shutterbase/ent/project"
	"github.com/shutterbase/shutterbase/ent/user"
)

// BatchCreate is the builder for creating a Batch entity.
type BatchCreate struct {
	config
	mutation *BatchMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (bc *BatchCreate) SetCreatedAt(t time.Time) *BatchCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BatchCreate) SetNillableCreatedAt(t *time.Time) *BatchCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BatchCreate) SetUpdatedAt(t time.Time) *BatchCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BatchCreate) SetNillableUpdatedAt(t *time.Time) *BatchCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetName sets the "name" field.
func (bc *BatchCreate) SetName(s string) *BatchCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetID sets the "id" field.
func (bc *BatchCreate) SetID(u uuid.UUID) *BatchCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BatchCreate) SetNillableID(u *uuid.UUID) *BatchCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (bc *BatchCreate) AddImageIDs(ids ...uuid.UUID) *BatchCreate {
	bc.mutation.AddImageIDs(ids...)
	return bc
}

// AddImages adds the "images" edges to the Image entity.
func (bc *BatchCreate) AddImages(i ...*Image) *BatchCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return bc.AddImageIDs(ids...)
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (bc *BatchCreate) SetProjectID(id uuid.UUID) *BatchCreate {
	bc.mutation.SetProjectID(id)
	return bc
}

// SetProject sets the "project" edge to the Project entity.
func (bc *BatchCreate) SetProject(p *Project) *BatchCreate {
	return bc.SetProjectID(p.ID)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (bc *BatchCreate) SetCreatedByID(id uuid.UUID) *BatchCreate {
	bc.mutation.SetCreatedByID(id)
	return bc
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (bc *BatchCreate) SetNillableCreatedByID(id *uuid.UUID) *BatchCreate {
	if id != nil {
		bc = bc.SetCreatedByID(*id)
	}
	return bc
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (bc *BatchCreate) SetCreatedBy(u *User) *BatchCreate {
	return bc.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (bc *BatchCreate) SetUpdatedByID(id uuid.UUID) *BatchCreate {
	bc.mutation.SetUpdatedByID(id)
	return bc
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (bc *BatchCreate) SetNillableUpdatedByID(id *uuid.UUID) *BatchCreate {
	if id != nil {
		bc = bc.SetUpdatedByID(*id)
	}
	return bc
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (bc *BatchCreate) SetUpdatedBy(u *User) *BatchCreate {
	return bc.SetUpdatedByID(u.ID)
}

// Mutation returns the BatchMutation object of the builder.
func (bc *BatchCreate) Mutation() *BatchMutation {
	return bc.mutation
}

// Save creates the Batch in the database.
func (bc *BatchCreate) Save(ctx context.Context) (*Batch, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BatchCreate) SaveX(ctx context.Context) *Batch {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BatchCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BatchCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BatchCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := batch.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := batch.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := batch.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BatchCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Batch.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Batch.updated_at"`)}
	}
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Batch.name"`)}
	}
	if v, ok := bc.mutation.Name(); ok {
		if err := batch.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Batch.name": %w`, err)}
		}
	}
	if _, ok := bc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "Batch.project"`)}
	}
	return nil
}

func (bc *BatchCreate) sqlSave(ctx context.Context) (*Batch, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BatchCreate) createSpec() (*Batch, *sqlgraph.CreateSpec) {
	var (
		_node = &Batch{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(batch.Table, sqlgraph.NewFieldSpec(batch.FieldID, field.TypeUUID))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(batch.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(batch.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(batch.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := bc.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   batch.ImagesTable,
			Columns: []string{batch.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   batch.ProjectTable,
			Columns: []string{batch.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.batch_project = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   batch.CreatedByTable,
			Columns: []string{batch.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.batch_created_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   batch.UpdatedByTable,
			Columns: []string{batch.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.batch_updated_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BatchCreateBulk is the builder for creating many Batch entities in bulk.
type BatchCreateBulk struct {
	config
	builders []*BatchCreate
}

// Save creates the Batch entities in the database.
func (bcb *BatchCreateBulk) Save(ctx context.Context) ([]*Batch, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Batch, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BatchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BatchCreateBulk) SaveX(ctx context.Context) []*Batch {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BatchCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BatchCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
