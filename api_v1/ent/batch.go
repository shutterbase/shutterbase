// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/batch"
	"github.com/shutterbase/shutterbase/ent/project"
	"github.com/shutterbase/shutterbase/ent/user"
)

// Batch is the model entity for the Batch schema.
type Batch struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BatchQuery when eager-loading is set.
	Edges            BatchEdges `json:"edges"`
	batch_project    *uuid.UUID
	batch_created_by *uuid.UUID
	batch_updated_by *uuid.UUID
	selectValues     sql.SelectValues
}

// BatchEdges holds the relations/edges for other nodes in the graph.
type BatchEdges struct {
	// Images holds the value of the images edge.
	Images []*Image `json:"images,omitempty"`
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"createdBy"`
	// UpdatedBy holds the value of the updated_by edge.
	UpdatedBy *User `json:"updatedBy"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e BatchEdges) ImagesOrErr() ([]*Image, error) {
	if e.loadedTypes[0] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BatchEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[1] {
		if e.Project == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BatchEdges) CreatedByOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.CreatedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreatedBy, nil
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// UpdatedByOrErr returns the UpdatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BatchEdges) UpdatedByOrErr() (*User, error) {
	if e.loadedTypes[3] {
		if e.UpdatedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UpdatedBy, nil
	}
	return nil, &NotLoadedError{edge: "updated_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Batch) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case batch.FieldName:
			values[i] = new(sql.NullString)
		case batch.FieldCreatedAt, batch.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case batch.FieldID:
			values[i] = new(uuid.UUID)
		case batch.ForeignKeys[0]: // batch_project
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case batch.ForeignKeys[1]: // batch_created_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case batch.ForeignKeys[2]: // batch_updated_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Batch fields.
func (b *Batch) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case batch.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case batch.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case batch.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case batch.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case batch.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field batch_project", values[i])
			} else if value.Valid {
				b.batch_project = new(uuid.UUID)
				*b.batch_project = *value.S.(*uuid.UUID)
			}
		case batch.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field batch_created_by", values[i])
			} else if value.Valid {
				b.batch_created_by = new(uuid.UUID)
				*b.batch_created_by = *value.S.(*uuid.UUID)
			}
		case batch.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field batch_updated_by", values[i])
			} else if value.Valid {
				b.batch_updated_by = new(uuid.UUID)
				*b.batch_updated_by = *value.S.(*uuid.UUID)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Batch.
// This includes values selected through modifiers, order, etc.
func (b *Batch) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryImages queries the "images" edge of the Batch entity.
func (b *Batch) QueryImages() *ImageQuery {
	return NewBatchClient(b.config).QueryImages(b)
}

// QueryProject queries the "project" edge of the Batch entity.
func (b *Batch) QueryProject() *ProjectQuery {
	return NewBatchClient(b.config).QueryProject(b)
}

// QueryCreatedBy queries the "created_by" edge of the Batch entity.
func (b *Batch) QueryCreatedBy() *UserQuery {
	return NewBatchClient(b.config).QueryCreatedBy(b)
}

// QueryUpdatedBy queries the "updated_by" edge of the Batch entity.
func (b *Batch) QueryUpdatedBy() *UserQuery {
	return NewBatchClient(b.config).QueryUpdatedBy(b)
}

// Update returns a builder for updating this Batch.
// Note that you need to call Batch.Unwrap() before calling this method if this Batch
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Batch) Update() *BatchUpdateOne {
	return NewBatchClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Batch entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Batch) Unwrap() *Batch {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Batch is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Batch) String() string {
	var builder strings.Builder
	builder.WriteString("Batch(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Batches is a parsable slice of Batch.
type Batches []*Batch
