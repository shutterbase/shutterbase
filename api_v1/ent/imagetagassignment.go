// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/image"
	"github.com/shutterbase/shutterbase/ent/imagetag"
	"github.com/shutterbase/shutterbase/ent/imagetagassignment"
	"github.com/shutterbase/shutterbase/ent/user"
)

// ImageTagAssignment is the model entity for the ImageTagAssignment schema.
type ImageTagAssignment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Type holds the value of the "type" field.
	Type imagetagassignment.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImageTagAssignmentQuery when eager-loading is set.
	Edges                           ImageTagAssignmentEdges `json:"edges"`
	image_tag_assignment_image      *uuid.UUID
	image_tag_assignment_image_tag  *uuid.UUID
	image_tag_assignment_created_by *uuid.UUID
	image_tag_assignment_updated_by *uuid.UUID
	selectValues                    sql.SelectValues
}

// ImageTagAssignmentEdges holds the relations/edges for other nodes in the graph.
type ImageTagAssignmentEdges struct {
	// Image holds the value of the image edge.
	Image *Image `json:"image,omitempty"`
	// ImageTag holds the value of the image_tag edge.
	ImageTag *ImageTag `json:"tag"`
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"createdBy"`
	// UpdatedBy holds the value of the updated_by edge.
	UpdatedBy *User `json:"updatedBy"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ImageOrErr returns the Image value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageTagAssignmentEdges) ImageOrErr() (*Image, error) {
	if e.loadedTypes[0] {
		if e.Image == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: image.Label}
		}
		return e.Image, nil
	}
	return nil, &NotLoadedError{edge: "image"}
}

// ImageTagOrErr returns the ImageTag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageTagAssignmentEdges) ImageTagOrErr() (*ImageTag, error) {
	if e.loadedTypes[1] {
		if e.ImageTag == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: imagetag.Label}
		}
		return e.ImageTag, nil
	}
	return nil, &NotLoadedError{edge: "image_tag"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageTagAssignmentEdges) CreatedByOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.CreatedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreatedBy, nil
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// UpdatedByOrErr returns the UpdatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImageTagAssignmentEdges) UpdatedByOrErr() (*User, error) {
	if e.loadedTypes[3] {
		if e.UpdatedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UpdatedBy, nil
	}
	return nil, &NotLoadedError{edge: "updated_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ImageTagAssignment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case imagetagassignment.FieldType:
			values[i] = new(sql.NullString)
		case imagetagassignment.FieldCreatedAt, imagetagassignment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case imagetagassignment.FieldID:
			values[i] = new(uuid.UUID)
		case imagetagassignment.ForeignKeys[0]: // image_tag_assignment_image
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case imagetagassignment.ForeignKeys[1]: // image_tag_assignment_image_tag
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case imagetagassignment.ForeignKeys[2]: // image_tag_assignment_created_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case imagetagassignment.ForeignKeys[3]: // image_tag_assignment_updated_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ImageTagAssignment fields.
func (ita *ImageTagAssignment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case imagetagassignment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ita.ID = *value
			}
		case imagetagassignment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ita.CreatedAt = value.Time
			}
		case imagetagassignment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ita.UpdatedAt = value.Time
			}
		case imagetagassignment.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ita.Type = imagetagassignment.Type(value.String)
			}
		case imagetagassignment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field image_tag_assignment_image", values[i])
			} else if value.Valid {
				ita.image_tag_assignment_image = new(uuid.UUID)
				*ita.image_tag_assignment_image = *value.S.(*uuid.UUID)
			}
		case imagetagassignment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field image_tag_assignment_image_tag", values[i])
			} else if value.Valid {
				ita.image_tag_assignment_image_tag = new(uuid.UUID)
				*ita.image_tag_assignment_image_tag = *value.S.(*uuid.UUID)
			}
		case imagetagassignment.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field image_tag_assignment_created_by", values[i])
			} else if value.Valid {
				ita.image_tag_assignment_created_by = new(uuid.UUID)
				*ita.image_tag_assignment_created_by = *value.S.(*uuid.UUID)
			}
		case imagetagassignment.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field image_tag_assignment_updated_by", values[i])
			} else if value.Valid {
				ita.image_tag_assignment_updated_by = new(uuid.UUID)
				*ita.image_tag_assignment_updated_by = *value.S.(*uuid.UUID)
			}
		default:
			ita.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ImageTagAssignment.
// This includes values selected through modifiers, order, etc.
func (ita *ImageTagAssignment) Value(name string) (ent.Value, error) {
	return ita.selectValues.Get(name)
}

// QueryImage queries the "image" edge of the ImageTagAssignment entity.
func (ita *ImageTagAssignment) QueryImage() *ImageQuery {
	return NewImageTagAssignmentClient(ita.config).QueryImage(ita)
}

// QueryImageTag queries the "image_tag" edge of the ImageTagAssignment entity.
func (ita *ImageTagAssignment) QueryImageTag() *ImageTagQuery {
	return NewImageTagAssignmentClient(ita.config).QueryImageTag(ita)
}

// QueryCreatedBy queries the "created_by" edge of the ImageTagAssignment entity.
func (ita *ImageTagAssignment) QueryCreatedBy() *UserQuery {
	return NewImageTagAssignmentClient(ita.config).QueryCreatedBy(ita)
}

// QueryUpdatedBy queries the "updated_by" edge of the ImageTagAssignment entity.
func (ita *ImageTagAssignment) QueryUpdatedBy() *UserQuery {
	return NewImageTagAssignmentClient(ita.config).QueryUpdatedBy(ita)
}

// Update returns a builder for updating this ImageTagAssignment.
// Note that you need to call ImageTagAssignment.Unwrap() before calling this method if this ImageTagAssignment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ita *ImageTagAssignment) Update() *ImageTagAssignmentUpdateOne {
	return NewImageTagAssignmentClient(ita.config).UpdateOne(ita)
}

// Unwrap unwraps the ImageTagAssignment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ita *ImageTagAssignment) Unwrap() *ImageTagAssignment {
	_tx, ok := ita.config.driver.(*txDriver)
	if !ok {
		panic("ent: ImageTagAssignment is not a transactional entity")
	}
	ita.config.driver = _tx.drv
	return ita
}

// String implements the fmt.Stringer.
func (ita *ImageTagAssignment) String() string {
	var builder strings.Builder
	builder.WriteString("ImageTagAssignment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ita.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ita.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ita.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ita.Type))
	builder.WriteByte(')')
	return builder.String()
}

// ImageTagAssignments is a parsable slice of ImageTagAssignment.
type ImageTagAssignments []*ImageTagAssignment
