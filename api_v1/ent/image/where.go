// Code generated by ent, DO NOT EDIT.

package image

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldUpdatedAt, v))
}

// ThumbnailID applies equality check predicate on the "thumbnail_id" field. It's identical to ThumbnailIDEQ.
func ThumbnailID(v uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldThumbnailID, v))
}

// FileName applies equality check predicate on the "file_name" field. It's identical to FileNameEQ.
func FileName(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldFileName, v))
}

// ComputedFileName applies equality check predicate on the "computed_file_name" field. It's identical to ComputedFileNameEQ.
func ComputedFileName(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldComputedFileName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldDescription, v))
}

// CapturedAt applies equality check predicate on the "captured_at" field. It's identical to CapturedAtEQ.
func CapturedAt(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldCapturedAt, v))
}

// CapturedAtCorrected applies equality check predicate on the "captured_at_corrected" field. It's identical to CapturedAtCorrectedEQ.
func CapturedAtCorrected(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldCapturedAtCorrected, v))
}

// InferredAt applies equality check predicate on the "inferred_at" field. It's identical to InferredAtEQ.
func InferredAt(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldInferredAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldUpdatedAt, v))
}

// ThumbnailIDEQ applies the EQ predicate on the "thumbnail_id" field.
func ThumbnailIDEQ(v uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldThumbnailID, v))
}

// ThumbnailIDNEQ applies the NEQ predicate on the "thumbnail_id" field.
func ThumbnailIDNEQ(v uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldThumbnailID, v))
}

// ThumbnailIDIn applies the In predicate on the "thumbnail_id" field.
func ThumbnailIDIn(vs ...uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldThumbnailID, vs...))
}

// ThumbnailIDNotIn applies the NotIn predicate on the "thumbnail_id" field.
func ThumbnailIDNotIn(vs ...uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldThumbnailID, vs...))
}

// ThumbnailIDGT applies the GT predicate on the "thumbnail_id" field.
func ThumbnailIDGT(v uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldThumbnailID, v))
}

// ThumbnailIDGTE applies the GTE predicate on the "thumbnail_id" field.
func ThumbnailIDGTE(v uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldThumbnailID, v))
}

// ThumbnailIDLT applies the LT predicate on the "thumbnail_id" field.
func ThumbnailIDLT(v uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldThumbnailID, v))
}

// ThumbnailIDLTE applies the LTE predicate on the "thumbnail_id" field.
func ThumbnailIDLTE(v uuid.UUID) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldThumbnailID, v))
}

// ThumbnailIDIsNil applies the IsNil predicate on the "thumbnail_id" field.
func ThumbnailIDIsNil() predicate.Image {
	return predicate.Image(sql.FieldIsNull(FieldThumbnailID))
}

// ThumbnailIDNotNil applies the NotNil predicate on the "thumbnail_id" field.
func ThumbnailIDNotNil() predicate.Image {
	return predicate.Image(sql.FieldNotNull(FieldThumbnailID))
}

// FileNameEQ applies the EQ predicate on the "file_name" field.
func FileNameEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldFileName, v))
}

// FileNameNEQ applies the NEQ predicate on the "file_name" field.
func FileNameNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldFileName, v))
}

// FileNameIn applies the In predicate on the "file_name" field.
func FileNameIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldFileName, vs...))
}

// FileNameNotIn applies the NotIn predicate on the "file_name" field.
func FileNameNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldFileName, vs...))
}

// FileNameGT applies the GT predicate on the "file_name" field.
func FileNameGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldFileName, v))
}

// FileNameGTE applies the GTE predicate on the "file_name" field.
func FileNameGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldFileName, v))
}

// FileNameLT applies the LT predicate on the "file_name" field.
func FileNameLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldFileName, v))
}

// FileNameLTE applies the LTE predicate on the "file_name" field.
func FileNameLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldFileName, v))
}

// FileNameContains applies the Contains predicate on the "file_name" field.
func FileNameContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldFileName, v))
}

// FileNameHasPrefix applies the HasPrefix predicate on the "file_name" field.
func FileNameHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldFileName, v))
}

// FileNameHasSuffix applies the HasSuffix predicate on the "file_name" field.
func FileNameHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldFileName, v))
}

// FileNameEqualFold applies the EqualFold predicate on the "file_name" field.
func FileNameEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldFileName, v))
}

// FileNameContainsFold applies the ContainsFold predicate on the "file_name" field.
func FileNameContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldFileName, v))
}

// ComputedFileNameEQ applies the EQ predicate on the "computed_file_name" field.
func ComputedFileNameEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldComputedFileName, v))
}

// ComputedFileNameNEQ applies the NEQ predicate on the "computed_file_name" field.
func ComputedFileNameNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldComputedFileName, v))
}

// ComputedFileNameIn applies the In predicate on the "computed_file_name" field.
func ComputedFileNameIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldComputedFileName, vs...))
}

// ComputedFileNameNotIn applies the NotIn predicate on the "computed_file_name" field.
func ComputedFileNameNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldComputedFileName, vs...))
}

// ComputedFileNameGT applies the GT predicate on the "computed_file_name" field.
func ComputedFileNameGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldComputedFileName, v))
}

// ComputedFileNameGTE applies the GTE predicate on the "computed_file_name" field.
func ComputedFileNameGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldComputedFileName, v))
}

// ComputedFileNameLT applies the LT predicate on the "computed_file_name" field.
func ComputedFileNameLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldComputedFileName, v))
}

// ComputedFileNameLTE applies the LTE predicate on the "computed_file_name" field.
func ComputedFileNameLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldComputedFileName, v))
}

// ComputedFileNameContains applies the Contains predicate on the "computed_file_name" field.
func ComputedFileNameContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldComputedFileName, v))
}

// ComputedFileNameHasPrefix applies the HasPrefix predicate on the "computed_file_name" field.
func ComputedFileNameHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldComputedFileName, v))
}

// ComputedFileNameHasSuffix applies the HasSuffix predicate on the "computed_file_name" field.
func ComputedFileNameHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldComputedFileName, v))
}

// ComputedFileNameEqualFold applies the EqualFold predicate on the "computed_file_name" field.
func ComputedFileNameEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldComputedFileName, v))
}

// ComputedFileNameContainsFold applies the ContainsFold predicate on the "computed_file_name" field.
func ComputedFileNameContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldComputedFileName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldDescription, v))
}

// CapturedAtEQ applies the EQ predicate on the "captured_at" field.
func CapturedAtEQ(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldCapturedAt, v))
}

// CapturedAtNEQ applies the NEQ predicate on the "captured_at" field.
func CapturedAtNEQ(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldCapturedAt, v))
}

// CapturedAtIn applies the In predicate on the "captured_at" field.
func CapturedAtIn(vs ...time.Time) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldCapturedAt, vs...))
}

// CapturedAtNotIn applies the NotIn predicate on the "captured_at" field.
func CapturedAtNotIn(vs ...time.Time) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldCapturedAt, vs...))
}

// CapturedAtGT applies the GT predicate on the "captured_at" field.
func CapturedAtGT(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldCapturedAt, v))
}

// CapturedAtGTE applies the GTE predicate on the "captured_at" field.
func CapturedAtGTE(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldCapturedAt, v))
}

// CapturedAtLT applies the LT predicate on the "captured_at" field.
func CapturedAtLT(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldCapturedAt, v))
}

// CapturedAtLTE applies the LTE predicate on the "captured_at" field.
func CapturedAtLTE(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldCapturedAt, v))
}

// CapturedAtIsNil applies the IsNil predicate on the "captured_at" field.
func CapturedAtIsNil() predicate.Image {
	return predicate.Image(sql.FieldIsNull(FieldCapturedAt))
}

// CapturedAtNotNil applies the NotNil predicate on the "captured_at" field.
func CapturedAtNotNil() predicate.Image {
	return predicate.Image(sql.FieldNotNull(FieldCapturedAt))
}

// CapturedAtCorrectedEQ applies the EQ predicate on the "captured_at_corrected" field.
func CapturedAtCorrectedEQ(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldCapturedAtCorrected, v))
}

// CapturedAtCorrectedNEQ applies the NEQ predicate on the "captured_at_corrected" field.
func CapturedAtCorrectedNEQ(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldCapturedAtCorrected, v))
}

// CapturedAtCorrectedIn applies the In predicate on the "captured_at_corrected" field.
func CapturedAtCorrectedIn(vs ...time.Time) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldCapturedAtCorrected, vs...))
}

// CapturedAtCorrectedNotIn applies the NotIn predicate on the "captured_at_corrected" field.
func CapturedAtCorrectedNotIn(vs ...time.Time) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldCapturedAtCorrected, vs...))
}

// CapturedAtCorrectedGT applies the GT predicate on the "captured_at_corrected" field.
func CapturedAtCorrectedGT(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldCapturedAtCorrected, v))
}

// CapturedAtCorrectedGTE applies the GTE predicate on the "captured_at_corrected" field.
func CapturedAtCorrectedGTE(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldCapturedAtCorrected, v))
}

// CapturedAtCorrectedLT applies the LT predicate on the "captured_at_corrected" field.
func CapturedAtCorrectedLT(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldCapturedAtCorrected, v))
}

// CapturedAtCorrectedLTE applies the LTE predicate on the "captured_at_corrected" field.
func CapturedAtCorrectedLTE(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldCapturedAtCorrected, v))
}

// CapturedAtCorrectedIsNil applies the IsNil predicate on the "captured_at_corrected" field.
func CapturedAtCorrectedIsNil() predicate.Image {
	return predicate.Image(sql.FieldIsNull(FieldCapturedAtCorrected))
}

// CapturedAtCorrectedNotNil applies the NotNil predicate on the "captured_at_corrected" field.
func CapturedAtCorrectedNotNil() predicate.Image {
	return predicate.Image(sql.FieldNotNull(FieldCapturedAtCorrected))
}

// InferredAtEQ applies the EQ predicate on the "inferred_at" field.
func InferredAtEQ(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldInferredAt, v))
}

// InferredAtNEQ applies the NEQ predicate on the "inferred_at" field.
func InferredAtNEQ(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldInferredAt, v))
}

// InferredAtIn applies the In predicate on the "inferred_at" field.
func InferredAtIn(vs ...time.Time) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldInferredAt, vs...))
}

// InferredAtNotIn applies the NotIn predicate on the "inferred_at" field.
func InferredAtNotIn(vs ...time.Time) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldInferredAt, vs...))
}

// InferredAtGT applies the GT predicate on the "inferred_at" field.
func InferredAtGT(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldInferredAt, v))
}

// InferredAtGTE applies the GTE predicate on the "inferred_at" field.
func InferredAtGTE(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldInferredAt, v))
}

// InferredAtLT applies the LT predicate on the "inferred_at" field.
func InferredAtLT(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldInferredAt, v))
}

// InferredAtLTE applies the LTE predicate on the "inferred_at" field.
func InferredAtLTE(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldInferredAt, v))
}

// InferredAtIsNil applies the IsNil predicate on the "inferred_at" field.
func InferredAtIsNil() predicate.Image {
	return predicate.Image(sql.FieldIsNull(FieldInferredAt))
}

// InferredAtNotNil applies the NotNil predicate on the "inferred_at" field.
func InferredAtNotNil() predicate.Image {
	return predicate.Image(sql.FieldNotNull(FieldInferredAt))
}

// HasImageTagAssignments applies the HasEdge predicate on the "image_tag_assignments" edge.
func HasImageTagAssignments() predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ImageTagAssignmentsTable, ImageTagAssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImageTagAssignmentsWith applies the HasEdge predicate on the "image_tag_assignments" edge with a given conditions (other predicates).
func HasImageTagAssignmentsWith(preds ...predicate.ImageTagAssignment) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := newImageTagAssignmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBatch applies the HasEdge predicate on the "batch" edge.
func HasBatch() predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BatchTable, BatchColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBatchWith applies the HasEdge predicate on the "batch" edge with a given conditions (other predicates).
func HasBatchWith(preds ...predicate.Batch) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := newBatchStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCamera applies the HasEdge predicate on the "camera" edge.
func HasCamera() predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CameraTable, CameraColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCameraWith applies the HasEdge predicate on the "camera" edge with a given conditions (other predicates).
func HasCameraWith(preds ...predicate.Camera) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := newCameraStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedBy applies the HasEdge predicate on the "created_by" edge.
func HasCreatedBy() predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreatedByTable, CreatedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedByWith applies the HasEdge predicate on the "created_by" edge with a given conditions (other predicates).
func HasCreatedByWith(preds ...predicate.User) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := newCreatedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdatedBy applies the HasEdge predicate on the "updated_by" edge.
func HasUpdatedBy() predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UpdatedByTable, UpdatedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdatedByWith applies the HasEdge predicate on the "updated_by" edge with a given conditions (other predicates).
func HasUpdatedByWith(preds ...predicate.User) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		step := newUpdatedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Image) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Image) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Image) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		p(s.Not())
	})
}
