// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/batch"
	"github.com/shutterbase/shutterbase/ent/image"
	"github.com/shutterbase/shutterbase/ent/imagetag"
	"github.com/shutterbase/shutterbase/ent/project"
	"github.com/shutterbase/shutterbase/ent/projectassignment"
	"github.com/shutterbase/shutterbase/ent/user"
)

// ProjectCreate is the builder for creating a Project entity.
type ProjectCreate struct {
	config
	mutation *ProjectMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProjectCreate) SetCreatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableCreatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProjectCreate) SetUpdatedAt(t time.Time) *ProjectCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableUpdatedAt(t *time.Time) *ProjectCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *ProjectCreate) SetName(s string) *ProjectCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *ProjectCreate) SetDescription(s string) *ProjectCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetCopyright sets the "copyright" field.
func (pc *ProjectCreate) SetCopyright(s string) *ProjectCreate {
	pc.mutation.SetCopyright(s)
	return pc
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableCopyright(s *string) *ProjectCreate {
	if s != nil {
		pc.SetCopyright(*s)
	}
	return pc
}

// SetCopyrightReference sets the "copyright_reference" field.
func (pc *ProjectCreate) SetCopyrightReference(s string) *ProjectCreate {
	pc.mutation.SetCopyrightReference(s)
	return pc
}

// SetNillableCopyrightReference sets the "copyright_reference" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableCopyrightReference(s *string) *ProjectCreate {
	if s != nil {
		pc.SetCopyrightReference(*s)
	}
	return pc
}

// SetLocationName sets the "location_name" field.
func (pc *ProjectCreate) SetLocationName(s string) *ProjectCreate {
	pc.mutation.SetLocationName(s)
	return pc
}

// SetNillableLocationName sets the "location_name" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableLocationName(s *string) *ProjectCreate {
	if s != nil {
		pc.SetLocationName(*s)
	}
	return pc
}

// SetLocationCode sets the "location_code" field.
func (pc *ProjectCreate) SetLocationCode(s string) *ProjectCreate {
	pc.mutation.SetLocationCode(s)
	return pc
}

// SetNillableLocationCode sets the "location_code" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableLocationCode(s *string) *ProjectCreate {
	if s != nil {
		pc.SetLocationCode(*s)
	}
	return pc
}

// SetLocationCity sets the "location_city" field.
func (pc *ProjectCreate) SetLocationCity(s string) *ProjectCreate {
	pc.mutation.SetLocationCity(s)
	return pc
}

// SetNillableLocationCity sets the "location_city" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableLocationCity(s *string) *ProjectCreate {
	if s != nil {
		pc.SetLocationCity(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProjectCreate) SetID(u uuid.UUID) *ProjectCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProjectCreate) SetNillableID(u *uuid.UUID) *ProjectCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// AddAssignmentIDs adds the "assignments" edge to the ProjectAssignment entity by IDs.
func (pc *ProjectCreate) AddAssignmentIDs(ids ...uuid.UUID) *ProjectCreate {
	pc.mutation.AddAssignmentIDs(ids...)
	return pc
}

// AddAssignments adds the "assignments" edges to the ProjectAssignment entity.
func (pc *ProjectCreate) AddAssignments(p ...*ProjectAssignment) *ProjectCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddAssignmentIDs(ids...)
}

// AddImageIDs adds the "images" edge to the Image entity by IDs.
func (pc *ProjectCreate) AddImageIDs(ids ...uuid.UUID) *ProjectCreate {
	pc.mutation.AddImageIDs(ids...)
	return pc
}

// AddImages adds the "images" edges to the Image entity.
func (pc *ProjectCreate) AddImages(i ...*Image) *ProjectCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pc.AddImageIDs(ids...)
}

// AddBatchIDs adds the "batches" edge to the Batch entity by IDs.
func (pc *ProjectCreate) AddBatchIDs(ids ...uuid.UUID) *ProjectCreate {
	pc.mutation.AddBatchIDs(ids...)
	return pc
}

// AddBatches adds the "batches" edges to the Batch entity.
func (pc *ProjectCreate) AddBatches(b ...*Batch) *ProjectCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pc.AddBatchIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the ImageTag entity by IDs.
func (pc *ProjectCreate) AddTagIDs(ids ...uuid.UUID) *ProjectCreate {
	pc.mutation.AddTagIDs(ids...)
	return pc
}

// AddTags adds the "tags" edges to the ImageTag entity.
func (pc *ProjectCreate) AddTags(i ...*ImageTag) *ProjectCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pc.AddTagIDs(ids...)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (pc *ProjectCreate) SetCreatedByID(id uuid.UUID) *ProjectCreate {
	pc.mutation.SetCreatedByID(id)
	return pc
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (pc *ProjectCreate) SetNillableCreatedByID(id *uuid.UUID) *ProjectCreate {
	if id != nil {
		pc = pc.SetCreatedByID(*id)
	}
	return pc
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (pc *ProjectCreate) SetCreatedBy(u *User) *ProjectCreate {
	return pc.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (pc *ProjectCreate) SetUpdatedByID(id uuid.UUID) *ProjectCreate {
	pc.mutation.SetUpdatedByID(id)
	return pc
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (pc *ProjectCreate) SetNillableUpdatedByID(id *uuid.UUID) *ProjectCreate {
	if id != nil {
		pc = pc.SetUpdatedByID(*id)
	}
	return pc
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (pc *ProjectCreate) SetUpdatedBy(u *User) *ProjectCreate {
	return pc.SetUpdatedByID(u.ID)
}

// Mutation returns the ProjectMutation object of the builder.
func (pc *ProjectCreate) Mutation() *ProjectMutation {
	return pc.mutation
}

// Save creates the Project in the database.
func (pc *ProjectCreate) Save(ctx context.Context) (*Project, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProjectCreate) SaveX(ctx context.Context) *Project {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProjectCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProjectCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProjectCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := project.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := project.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Copyright(); !ok {
		v := project.DefaultCopyright
		pc.mutation.SetCopyright(v)
	}
	if _, ok := pc.mutation.CopyrightReference(); !ok {
		v := project.DefaultCopyrightReference
		pc.mutation.SetCopyrightReference(v)
	}
	if _, ok := pc.mutation.LocationName(); !ok {
		v := project.DefaultLocationName
		pc.mutation.SetLocationName(v)
	}
	if _, ok := pc.mutation.LocationCode(); !ok {
		v := project.DefaultLocationCode
		pc.mutation.SetLocationCode(v)
	}
	if _, ok := pc.mutation.LocationCity(); !ok {
		v := project.DefaultLocationCity
		pc.mutation.SetLocationCity(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := project.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProjectCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Project.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Project.updated_at"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Project.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Project.description"`)}
	}
	if v, ok := pc.mutation.Description(); ok {
		if err := project.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Project.description": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Copyright(); !ok {
		return &ValidationError{Name: "copyright", err: errors.New(`ent: missing required field "Project.copyright"`)}
	}
	if _, ok := pc.mutation.CopyrightReference(); !ok {
		return &ValidationError{Name: "copyright_reference", err: errors.New(`ent: missing required field "Project.copyright_reference"`)}
	}
	if _, ok := pc.mutation.LocationName(); !ok {
		return &ValidationError{Name: "location_name", err: errors.New(`ent: missing required field "Project.location_name"`)}
	}
	if _, ok := pc.mutation.LocationCode(); !ok {
		return &ValidationError{Name: "location_code", err: errors.New(`ent: missing required field "Project.location_code"`)}
	}
	if _, ok := pc.mutation.LocationCity(); !ok {
		return &ValidationError{Name: "location_city", err: errors.New(`ent: missing required field "Project.location_city"`)}
	}
	return nil
}

func (pc *ProjectCreate) sqlSave(ctx context.Context) (*Project, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProjectCreate) createSpec() (*Project, *sqlgraph.CreateSpec) {
	var (
		_node = &Project{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(project.Table, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(project.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Copyright(); ok {
		_spec.SetField(project.FieldCopyright, field.TypeString, value)
		_node.Copyright = value
	}
	if value, ok := pc.mutation.CopyrightReference(); ok {
		_spec.SetField(project.FieldCopyrightReference, field.TypeString, value)
		_node.CopyrightReference = value
	}
	if value, ok := pc.mutation.LocationName(); ok {
		_spec.SetField(project.FieldLocationName, field.TypeString, value)
		_node.LocationName = value
	}
	if value, ok := pc.mutation.LocationCode(); ok {
		_spec.SetField(project.FieldLocationCode, field.TypeString, value)
		_node.LocationCode = value
	}
	if value, ok := pc.mutation.LocationCity(); ok {
		_spec.SetField(project.FieldLocationCity, field.TypeString, value)
		_node.LocationCity = value
	}
	if nodes := pc.mutation.AssignmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.AssignmentsTable,
			Columns: []string{project.AssignmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectassignment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.ImagesTable,
			Columns: []string{project.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.BatchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.BatchesTable,
			Columns: []string{project.BatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.TagsTable,
			Columns: []string{project.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imagetag.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   project.CreatedByTable,
			Columns: []string{project.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_created_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   project.UpdatedByTable,
			Columns: []string{project.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_updated_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectCreateBulk is the builder for creating many Project entities in bulk.
type ProjectCreateBulk struct {
	config
	builders []*ProjectCreate
}

// Save creates the Project entities in the database.
func (pcb *ProjectCreateBulk) Save(ctx context.Context) ([]*Project, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Project, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProjectCreateBulk) SaveX(ctx context.Context) []*Project {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProjectCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
