// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/camera"
	"github.com/shutterbase/shutterbase/ent/user"
)

// Camera is the model entity for the Camera schema.
type Camera struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"createdAt"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updatedAt"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CameraQuery when eager-loading is set.
	Edges             CameraEdges `json:"edges"`
	camera_owner      *uuid.UUID
	camera_created_by *uuid.UUID
	camera_updated_by *uuid.UUID
	selectValues      sql.SelectValues
}

// CameraEdges holds the relations/edges for other nodes in the graph.
type CameraEdges struct {
	// TimeOffsets holds the value of the timeOffsets edge.
	TimeOffsets []*TimeOffset `json:"timeOffsets,omitempty"`
	// Images holds the value of the images edge.
	Images []*Image `json:"images,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner"`
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"createdBy"`
	// UpdatedBy holds the value of the updated_by edge.
	UpdatedBy *User `json:"updatedBy"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// TimeOffsetsOrErr returns the TimeOffsets value or an error if the edge
// was not loaded in eager-loading.
func (e CameraEdges) TimeOffsetsOrErr() ([]*TimeOffset, error) {
	if e.loadedTypes[0] {
		return e.TimeOffsets, nil
	}
	return nil, &NotLoadedError{edge: "timeOffsets"}
}

// ImagesOrErr returns the Images value or an error if the edge
// was not loaded in eager-loading.
func (e CameraEdges) ImagesOrErr() ([]*Image, error) {
	if e.loadedTypes[1] {
		return e.Images, nil
	}
	return nil, &NotLoadedError{edge: "images"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CameraEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CameraEdges) CreatedByOrErr() (*User, error) {
	if e.loadedTypes[3] {
		if e.CreatedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreatedBy, nil
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// UpdatedByOrErr returns the UpdatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CameraEdges) UpdatedByOrErr() (*User, error) {
	if e.loadedTypes[4] {
		if e.UpdatedBy == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UpdatedBy, nil
	}
	return nil, &NotLoadedError{edge: "updated_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Camera) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case camera.FieldName, camera.FieldDescription:
			values[i] = new(sql.NullString)
		case camera.FieldCreatedAt, camera.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case camera.FieldID:
			values[i] = new(uuid.UUID)
		case camera.ForeignKeys[0]: // camera_owner
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case camera.ForeignKeys[1]: // camera_created_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case camera.ForeignKeys[2]: // camera_updated_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Camera fields.
func (c *Camera) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case camera.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case camera.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case camera.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case camera.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case camera.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case camera.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field camera_owner", values[i])
			} else if value.Valid {
				c.camera_owner = new(uuid.UUID)
				*c.camera_owner = *value.S.(*uuid.UUID)
			}
		case camera.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field camera_created_by", values[i])
			} else if value.Valid {
				c.camera_created_by = new(uuid.UUID)
				*c.camera_created_by = *value.S.(*uuid.UUID)
			}
		case camera.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field camera_updated_by", values[i])
			} else if value.Valid {
				c.camera_updated_by = new(uuid.UUID)
				*c.camera_updated_by = *value.S.(*uuid.UUID)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Camera.
// This includes values selected through modifiers, order, etc.
func (c *Camera) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryTimeOffsets queries the "timeOffsets" edge of the Camera entity.
func (c *Camera) QueryTimeOffsets() *TimeOffsetQuery {
	return NewCameraClient(c.config).QueryTimeOffsets(c)
}

// QueryImages queries the "images" edge of the Camera entity.
func (c *Camera) QueryImages() *ImageQuery {
	return NewCameraClient(c.config).QueryImages(c)
}

// QueryOwner queries the "owner" edge of the Camera entity.
func (c *Camera) QueryOwner() *UserQuery {
	return NewCameraClient(c.config).QueryOwner(c)
}

// QueryCreatedBy queries the "created_by" edge of the Camera entity.
func (c *Camera) QueryCreatedBy() *UserQuery {
	return NewCameraClient(c.config).QueryCreatedBy(c)
}

// QueryUpdatedBy queries the "updated_by" edge of the Camera entity.
func (c *Camera) QueryUpdatedBy() *UserQuery {
	return NewCameraClient(c.config).QueryUpdatedBy(c)
}

// Update returns a builder for updating this Camera.
// Note that you need to call Camera.Unwrap() before calling this method if this Camera
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Camera) Update() *CameraUpdateOne {
	return NewCameraClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Camera entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Camera) Unwrap() *Camera {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Camera is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Camera) String() string {
	var builder strings.Builder
	builder.WriteString("Camera(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Cameras is a parsable slice of Camera.
type Cameras []*Camera
