// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/camera"
	"github.com/shutterbase/shutterbase/ent/timeoffset"
	"github.com/shutterbase/shutterbase/ent/user"
)

// TimeOffsetCreate is the builder for creating a TimeOffset entity.
type TimeOffsetCreate struct {
	config
	mutation *TimeOffsetMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (toc *TimeOffsetCreate) SetCreatedAt(t time.Time) *TimeOffsetCreate {
	toc.mutation.SetCreatedAt(t)
	return toc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (toc *TimeOffsetCreate) SetNillableCreatedAt(t *time.Time) *TimeOffsetCreate {
	if t != nil {
		toc.SetCreatedAt(*t)
	}
	return toc
}

// SetUpdatedAt sets the "updated_at" field.
func (toc *TimeOffsetCreate) SetUpdatedAt(t time.Time) *TimeOffsetCreate {
	toc.mutation.SetUpdatedAt(t)
	return toc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (toc *TimeOffsetCreate) SetNillableUpdatedAt(t *time.Time) *TimeOffsetCreate {
	if t != nil {
		toc.SetUpdatedAt(*t)
	}
	return toc
}

// SetServerTime sets the "server_time" field.
func (toc *TimeOffsetCreate) SetServerTime(t time.Time) *TimeOffsetCreate {
	toc.mutation.SetServerTime(t)
	return toc
}

// SetCameraTime sets the "camera_time" field.
func (toc *TimeOffsetCreate) SetCameraTime(t time.Time) *TimeOffsetCreate {
	toc.mutation.SetCameraTime(t)
	return toc
}

// SetOffsetSeconds sets the "offset_seconds" field.
func (toc *TimeOffsetCreate) SetOffsetSeconds(i int) *TimeOffsetCreate {
	toc.mutation.SetOffsetSeconds(i)
	return toc
}

// SetID sets the "id" field.
func (toc *TimeOffsetCreate) SetID(u uuid.UUID) *TimeOffsetCreate {
	toc.mutation.SetID(u)
	return toc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (toc *TimeOffsetCreate) SetNillableID(u *uuid.UUID) *TimeOffsetCreate {
	if u != nil {
		toc.SetID(*u)
	}
	return toc
}

// SetCameraID sets the "camera" edge to the Camera entity by ID.
func (toc *TimeOffsetCreate) SetCameraID(id uuid.UUID) *TimeOffsetCreate {
	toc.mutation.SetCameraID(id)
	return toc
}

// SetNillableCameraID sets the "camera" edge to the Camera entity by ID if the given value is not nil.
func (toc *TimeOffsetCreate) SetNillableCameraID(id *uuid.UUID) *TimeOffsetCreate {
	if id != nil {
		toc = toc.SetCameraID(*id)
	}
	return toc
}

// SetCamera sets the "camera" edge to the Camera entity.
func (toc *TimeOffsetCreate) SetCamera(c *Camera) *TimeOffsetCreate {
	return toc.SetCameraID(c.ID)
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (toc *TimeOffsetCreate) SetCreatedByID(id uuid.UUID) *TimeOffsetCreate {
	toc.mutation.SetCreatedByID(id)
	return toc
}

// SetNillableCreatedByID sets the "created_by" edge to the User entity by ID if the given value is not nil.
func (toc *TimeOffsetCreate) SetNillableCreatedByID(id *uuid.UUID) *TimeOffsetCreate {
	if id != nil {
		toc = toc.SetCreatedByID(*id)
	}
	return toc
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (toc *TimeOffsetCreate) SetCreatedBy(u *User) *TimeOffsetCreate {
	return toc.SetCreatedByID(u.ID)
}

// SetUpdatedByID sets the "updated_by" edge to the User entity by ID.
func (toc *TimeOffsetCreate) SetUpdatedByID(id uuid.UUID) *TimeOffsetCreate {
	toc.mutation.SetUpdatedByID(id)
	return toc
}

// SetNillableUpdatedByID sets the "updated_by" edge to the User entity by ID if the given value is not nil.
func (toc *TimeOffsetCreate) SetNillableUpdatedByID(id *uuid.UUID) *TimeOffsetCreate {
	if id != nil {
		toc = toc.SetUpdatedByID(*id)
	}
	return toc
}

// SetUpdatedBy sets the "updated_by" edge to the User entity.
func (toc *TimeOffsetCreate) SetUpdatedBy(u *User) *TimeOffsetCreate {
	return toc.SetUpdatedByID(u.ID)
}

// Mutation returns the TimeOffsetMutation object of the builder.
func (toc *TimeOffsetCreate) Mutation() *TimeOffsetMutation {
	return toc.mutation
}

// Save creates the TimeOffset in the database.
func (toc *TimeOffsetCreate) Save(ctx context.Context) (*TimeOffset, error) {
	toc.defaults()
	return withHooks(ctx, toc.sqlSave, toc.mutation, toc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (toc *TimeOffsetCreate) SaveX(ctx context.Context) *TimeOffset {
	v, err := toc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (toc *TimeOffsetCreate) Exec(ctx context.Context) error {
	_, err := toc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (toc *TimeOffsetCreate) ExecX(ctx context.Context) {
	if err := toc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (toc *TimeOffsetCreate) defaults() {
	if _, ok := toc.mutation.CreatedAt(); !ok {
		v := timeoffset.DefaultCreatedAt()
		toc.mutation.SetCreatedAt(v)
	}
	if _, ok := toc.mutation.UpdatedAt(); !ok {
		v := timeoffset.DefaultUpdatedAt()
		toc.mutation.SetUpdatedAt(v)
	}
	if _, ok := toc.mutation.ID(); !ok {
		v := timeoffset.DefaultID()
		toc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (toc *TimeOffsetCreate) check() error {
	if _, ok := toc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TimeOffset.created_at"`)}
	}
	if _, ok := toc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TimeOffset.updated_at"`)}
	}
	if _, ok := toc.mutation.ServerTime(); !ok {
		return &ValidationError{Name: "server_time", err: errors.New(`ent: missing required field "TimeOffset.server_time"`)}
	}
	if _, ok := toc.mutation.CameraTime(); !ok {
		return &ValidationError{Name: "camera_time", err: errors.New(`ent: missing required field "TimeOffset.camera_time"`)}
	}
	if _, ok := toc.mutation.OffsetSeconds(); !ok {
		return &ValidationError{Name: "offset_seconds", err: errors.New(`ent: missing required field "TimeOffset.offset_seconds"`)}
	}
	return nil
}

func (toc *TimeOffsetCreate) sqlSave(ctx context.Context) (*TimeOffset, error) {
	if err := toc.check(); err != nil {
		return nil, err
	}
	_node, _spec := toc.createSpec()
	if err := sqlgraph.CreateNode(ctx, toc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	toc.mutation.id = &_node.ID
	toc.mutation.done = true
	return _node, nil
}

func (toc *TimeOffsetCreate) createSpec() (*TimeOffset, *sqlgraph.CreateSpec) {
	var (
		_node = &TimeOffset{config: toc.config}
		_spec = sqlgraph.NewCreateSpec(timeoffset.Table, sqlgraph.NewFieldSpec(timeoffset.FieldID, field.TypeUUID))
	)
	if id, ok := toc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := toc.mutation.CreatedAt(); ok {
		_spec.SetField(timeoffset.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := toc.mutation.UpdatedAt(); ok {
		_spec.SetField(timeoffset.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := toc.mutation.ServerTime(); ok {
		_spec.SetField(timeoffset.FieldServerTime, field.TypeTime, value)
		_node.ServerTime = value
	}
	if value, ok := toc.mutation.CameraTime(); ok {
		_spec.SetField(timeoffset.FieldCameraTime, field.TypeTime, value)
		_node.CameraTime = value
	}
	if value, ok := toc.mutation.OffsetSeconds(); ok {
		_spec.SetField(timeoffset.FieldOffsetSeconds, field.TypeInt, value)
		_node.OffsetSeconds = value
	}
	if nodes := toc.mutation.CameraIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timeoffset.CameraTable,
			Columns: []string{timeoffset.CameraColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(camera.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.time_offset_camera = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := toc.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timeoffset.CreatedByTable,
			Columns: []string{timeoffset.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.time_offset_created_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := toc.mutation.UpdatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   timeoffset.UpdatedByTable,
			Columns: []string{timeoffset.UpdatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.time_offset_updated_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TimeOffsetCreateBulk is the builder for creating many TimeOffset entities in bulk.
type TimeOffsetCreateBulk struct {
	config
	builders []*TimeOffsetCreate
}

// Save creates the TimeOffset entities in the database.
func (tocb *TimeOffsetCreateBulk) Save(ctx context.Context) ([]*TimeOffset, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tocb.builders))
	nodes := make([]*TimeOffset, len(tocb.builders))
	mutators := make([]Mutator, len(tocb.builders))
	for i := range tocb.builders {
		func(i int, root context.Context) {
			builder := tocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TimeOffsetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tocb *TimeOffsetCreateBulk) SaveX(ctx context.Context) []*TimeOffset {
	v, err := tocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tocb *TimeOffsetCreateBulk) Exec(ctx context.Context) error {
	_, err := tocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tocb *TimeOffsetCreateBulk) ExecX(ctx context.Context) {
	if err := tocb.Exec(ctx); err != nil {
		panic(err)
	}
}
