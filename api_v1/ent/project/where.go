// Code generated by ent, DO NOT EDIT.

package project

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/shutterbase/shutterbase/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDescription, v))
}

// Copyright applies equality check predicate on the "copyright" field. It's identical to CopyrightEQ.
func Copyright(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCopyright, v))
}

// CopyrightReference applies equality check predicate on the "copyright_reference" field. It's identical to CopyrightReferenceEQ.
func CopyrightReference(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCopyrightReference, v))
}

// LocationName applies equality check predicate on the "location_name" field. It's identical to LocationNameEQ.
func LocationName(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldLocationName, v))
}

// LocationCode applies equality check predicate on the "location_code" field. It's identical to LocationCodeEQ.
func LocationCode(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldLocationCode, v))
}

// LocationCity applies equality check predicate on the "location_city" field. It's identical to LocationCityEQ.
func LocationCity(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldLocationCity, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldDescription, v))
}

// CopyrightEQ applies the EQ predicate on the "copyright" field.
func CopyrightEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCopyright, v))
}

// CopyrightNEQ applies the NEQ predicate on the "copyright" field.
func CopyrightNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCopyright, v))
}

// CopyrightIn applies the In predicate on the "copyright" field.
func CopyrightIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCopyright, vs...))
}

// CopyrightNotIn applies the NotIn predicate on the "copyright" field.
func CopyrightNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCopyright, vs...))
}

// CopyrightGT applies the GT predicate on the "copyright" field.
func CopyrightGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCopyright, v))
}

// CopyrightGTE applies the GTE predicate on the "copyright" field.
func CopyrightGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCopyright, v))
}

// CopyrightLT applies the LT predicate on the "copyright" field.
func CopyrightLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCopyright, v))
}

// CopyrightLTE applies the LTE predicate on the "copyright" field.
func CopyrightLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCopyright, v))
}

// CopyrightContains applies the Contains predicate on the "copyright" field.
func CopyrightContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldCopyright, v))
}

// CopyrightHasPrefix applies the HasPrefix predicate on the "copyright" field.
func CopyrightHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldCopyright, v))
}

// CopyrightHasSuffix applies the HasSuffix predicate on the "copyright" field.
func CopyrightHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldCopyright, v))
}

// CopyrightEqualFold applies the EqualFold predicate on the "copyright" field.
func CopyrightEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldCopyright, v))
}

// CopyrightContainsFold applies the ContainsFold predicate on the "copyright" field.
func CopyrightContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldCopyright, v))
}

// CopyrightReferenceEQ applies the EQ predicate on the "copyright_reference" field.
func CopyrightReferenceEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCopyrightReference, v))
}

// CopyrightReferenceNEQ applies the NEQ predicate on the "copyright_reference" field.
func CopyrightReferenceNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCopyrightReference, v))
}

// CopyrightReferenceIn applies the In predicate on the "copyright_reference" field.
func CopyrightReferenceIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCopyrightReference, vs...))
}

// CopyrightReferenceNotIn applies the NotIn predicate on the "copyright_reference" field.
func CopyrightReferenceNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCopyrightReference, vs...))
}

// CopyrightReferenceGT applies the GT predicate on the "copyright_reference" field.
func CopyrightReferenceGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCopyrightReference, v))
}

// CopyrightReferenceGTE applies the GTE predicate on the "copyright_reference" field.
func CopyrightReferenceGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCopyrightReference, v))
}

// CopyrightReferenceLT applies the LT predicate on the "copyright_reference" field.
func CopyrightReferenceLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCopyrightReference, v))
}

// CopyrightReferenceLTE applies the LTE predicate on the "copyright_reference" field.
func CopyrightReferenceLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCopyrightReference, v))
}

// CopyrightReferenceContains applies the Contains predicate on the "copyright_reference" field.
func CopyrightReferenceContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldCopyrightReference, v))
}

// CopyrightReferenceHasPrefix applies the HasPrefix predicate on the "copyright_reference" field.
func CopyrightReferenceHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldCopyrightReference, v))
}

// CopyrightReferenceHasSuffix applies the HasSuffix predicate on the "copyright_reference" field.
func CopyrightReferenceHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldCopyrightReference, v))
}

// CopyrightReferenceEqualFold applies the EqualFold predicate on the "copyright_reference" field.
func CopyrightReferenceEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldCopyrightReference, v))
}

// CopyrightReferenceContainsFold applies the ContainsFold predicate on the "copyright_reference" field.
func CopyrightReferenceContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldCopyrightReference, v))
}

// LocationNameEQ applies the EQ predicate on the "location_name" field.
func LocationNameEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldLocationName, v))
}

// LocationNameNEQ applies the NEQ predicate on the "location_name" field.
func LocationNameNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldLocationName, v))
}

// LocationNameIn applies the In predicate on the "location_name" field.
func LocationNameIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldLocationName, vs...))
}

// LocationNameNotIn applies the NotIn predicate on the "location_name" field.
func LocationNameNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldLocationName, vs...))
}

// LocationNameGT applies the GT predicate on the "location_name" field.
func LocationNameGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldLocationName, v))
}

// LocationNameGTE applies the GTE predicate on the "location_name" field.
func LocationNameGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldLocationName, v))
}

// LocationNameLT applies the LT predicate on the "location_name" field.
func LocationNameLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldLocationName, v))
}

// LocationNameLTE applies the LTE predicate on the "location_name" field.
func LocationNameLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldLocationName, v))
}

// LocationNameContains applies the Contains predicate on the "location_name" field.
func LocationNameContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldLocationName, v))
}

// LocationNameHasPrefix applies the HasPrefix predicate on the "location_name" field.
func LocationNameHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldLocationName, v))
}

// LocationNameHasSuffix applies the HasSuffix predicate on the "location_name" field.
func LocationNameHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldLocationName, v))
}

// LocationNameEqualFold applies the EqualFold predicate on the "location_name" field.
func LocationNameEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldLocationName, v))
}

// LocationNameContainsFold applies the ContainsFold predicate on the "location_name" field.
func LocationNameContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldLocationName, v))
}

// LocationCodeEQ applies the EQ predicate on the "location_code" field.
func LocationCodeEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldLocationCode, v))
}

// LocationCodeNEQ applies the NEQ predicate on the "location_code" field.
func LocationCodeNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldLocationCode, v))
}

// LocationCodeIn applies the In predicate on the "location_code" field.
func LocationCodeIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldLocationCode, vs...))
}

// LocationCodeNotIn applies the NotIn predicate on the "location_code" field.
func LocationCodeNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldLocationCode, vs...))
}

// LocationCodeGT applies the GT predicate on the "location_code" field.
func LocationCodeGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldLocationCode, v))
}

// LocationCodeGTE applies the GTE predicate on the "location_code" field.
func LocationCodeGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldLocationCode, v))
}

// LocationCodeLT applies the LT predicate on the "location_code" field.
func LocationCodeLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldLocationCode, v))
}

// LocationCodeLTE applies the LTE predicate on the "location_code" field.
func LocationCodeLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldLocationCode, v))
}

// LocationCodeContains applies the Contains predicate on the "location_code" field.
func LocationCodeContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldLocationCode, v))
}

// LocationCodeHasPrefix applies the HasPrefix predicate on the "location_code" field.
func LocationCodeHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldLocationCode, v))
}

// LocationCodeHasSuffix applies the HasSuffix predicate on the "location_code" field.
func LocationCodeHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldLocationCode, v))
}

// LocationCodeEqualFold applies the EqualFold predicate on the "location_code" field.
func LocationCodeEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldLocationCode, v))
}

// LocationCodeContainsFold applies the ContainsFold predicate on the "location_code" field.
func LocationCodeContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldLocationCode, v))
}

// LocationCityEQ applies the EQ predicate on the "location_city" field.
func LocationCityEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldLocationCity, v))
}

// LocationCityNEQ applies the NEQ predicate on the "location_city" field.
func LocationCityNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldLocationCity, v))
}

// LocationCityIn applies the In predicate on the "location_city" field.
func LocationCityIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldLocationCity, vs...))
}

// LocationCityNotIn applies the NotIn predicate on the "location_city" field.
func LocationCityNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldLocationCity, vs...))
}

// LocationCityGT applies the GT predicate on the "location_city" field.
func LocationCityGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldLocationCity, v))
}

// LocationCityGTE applies the GTE predicate on the "location_city" field.
func LocationCityGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldLocationCity, v))
}

// LocationCityLT applies the LT predicate on the "location_city" field.
func LocationCityLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldLocationCity, v))
}

// LocationCityLTE applies the LTE predicate on the "location_city" field.
func LocationCityLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldLocationCity, v))
}

// LocationCityContains applies the Contains predicate on the "location_city" field.
func LocationCityContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldLocationCity, v))
}

// LocationCityHasPrefix applies the HasPrefix predicate on the "location_city" field.
func LocationCityHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldLocationCity, v))
}

// LocationCityHasSuffix applies the HasSuffix predicate on the "location_city" field.
func LocationCityHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldLocationCity, v))
}

// LocationCityEqualFold applies the EqualFold predicate on the "location_city" field.
func LocationCityEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldLocationCity, v))
}

// LocationCityContainsFold applies the ContainsFold predicate on the "location_city" field.
func LocationCityContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldLocationCity, v))
}

// HasAssignments applies the HasEdge predicate on the "assignments" edge.
func HasAssignments() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, AssignmentsTable, AssignmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssignmentsWith applies the HasEdge predicate on the "assignments" edge with a given conditions (other predicates).
func HasAssignmentsWith(preds ...predicate.ProjectAssignment) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newAssignmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasImages applies the HasEdge predicate on the "images" edge.
func HasImages() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ImagesTable, ImagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasImagesWith applies the HasEdge predicate on the "images" edge with a given conditions (other predicates).
func HasImagesWith(preds ...predicate.Image) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newImagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBatches applies the HasEdge predicate on the "batches" edge.
func HasBatches() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, BatchesTable, BatchesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBatchesWith applies the HasEdge predicate on the "batches" edge with a given conditions (other predicates).
func HasBatchesWith(preds ...predicate.Batch) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newBatchesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, TagsTable, TagsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.ImageTag) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCreatedBy applies the HasEdge predicate on the "created_by" edge.
func HasCreatedBy() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CreatedByTable, CreatedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatedByWith applies the HasEdge predicate on the "created_by" edge with a given conditions (other predicates).
func HasCreatedByWith(preds ...predicate.User) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newCreatedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUpdatedBy applies the HasEdge predicate on the "updated_by" edge.
func HasUpdatedBy() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UpdatedByTable, UpdatedByColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUpdatedByWith applies the HasEdge predicate on the "updated_by" edge with a given conditions (other predicates).
func HasUpdatedByWith(preds ...predicate.User) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newUpdatedByStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		p(s.Not())
	})
}
